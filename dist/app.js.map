{"version":3,"sources":["../app.js"],"names":["os","require","path","assert","express","morgan","rfs","vhost","http","https","http2","fs","cookieParser","session","MongoDBStore","csurf","swig","mongoose","bodyParser","sillyDateTime","serveIndex","uuidv4","expressRequestId","app","start_log","options","key","readFileSync","__dirname","cert","engine","renderFile","set","setDefaults","cache","use","urlencoded","extended","json","limit","maxAge","secure","store","uri","databaseName","collection","err","on","ifError","error","ok","genid","req","secret","resave","saveUninitialized","cookie","rolling","res","next","cookies","uid","e","console","log","platform","ignoreMethods","code","status","send","logDirectory","join","existsSync","mkdirSync","logerFile","format","Date","accessLogStream","interval","size","compress","stream","static","listen","connect","createServer"],"mappings":"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","file":"app.js","sourcesContent":["/*\n * 项目入口\n */\nconst os = require('os');\nconst path = require('path');\nconst assert = require('assert');\nconst express = require('express');\nconst morgan = require('morgan');\nconst rfs = require('rotating-file-stream');\nconst vhost = require('vhost');\nconst http = require('http');\nconst https = require('https');\n//引入http2模块\nconst http2 = require('spdy');\nconst fs = require('fs');\nconst cookieParser = require('cookie-parser');\nconst session = require('express-session');\nconst MongoDBStore = require('connect-mongodb-session')(session);\nconst csurf = require('csurf');\nconst swig = require('swig');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst sillyDateTime = require('silly-datetime');\nconst serveIndex = require('serve-index');\nconst uuidv4 = require('uuid/v4');\nconst expressRequestId = require('express-request-id')();\nconst app = express();\n//是否启动记录访问日志\nconst start_log = true;\nlet options = {\n    key: fs.readFileSync(__dirname + '/ssl/214483626110776.key'),\n    cert: fs.readFileSync(__dirname + '/ssl/214483626110776.pem')\n}\n\n//设置模板引擎\napp.engine('html', swig.renderFile);\n//  设置模板路径\napp.set('views', './views');\n// 注册模板\napp.set('view engine', 'html');\n// 将模板缓存设置false\nswig.setDefaults({ cache: false });\n// 设置request id\napp.use(expressRequestId);\n// extends设置true表示接收的数据是数组，false表示是字符串\napp.use(bodyParser.urlencoded({ extended: true }));\n// 将提交的数据转成json,并且设置请求实体大小\napp.use(bodyParser.json({ limit: '50mb' }));\napp.use(bodyParser.urlencoded({ limit: '50mb', extended: true }));\napp.use(cookieParser('session_id', { maxAge: 1800000, secure: true }));\n\nconst store = new MongoDBStore({\n    uri: 'mongodb://localhost:27017',\n    databaseName: 'blog',\n    collection: 'sessions'\n}, err=>{\n    if(err) throw err;\n});\n\nstore.on('error', error=>{\n    assert.ifError(error);\n    assert.ok(false);\n});\n\napp.use(session({\n    genid: function(req) {\n        return uuidv4()   // use UUIDs for session IDs\n    },\n    secret: 'session_id', // 与cookieParser中的一致\n    resave: true,\n    store: store,         // 将session保存到mongodb中\n    saveUninitialized: true,\n    cookie: {\n        secure: true,\n        maxAge: 1800000,\n    },\n    rolling: true\n}));\n// 服务器启动时默认配置/动作\napp.use(function(req, res, next) {\n    // //将登录后的用户信息附加到request头信息中\n    if (req.cookies.uid && req.cookies.uid != '') {\n        try {\n            req.session.uid = req.cookies.uid;\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    // 将系统类型添加到cookies和请求头中;\n    // os.platform return now node runing systems : darwin=>MAC win32=>windows\n    res.cookie('platform', os.platform);\n    req.platform = os.platform;\n    next();\n});\n\napp.use(csurf({ cookie: true, ignoreMethods: ['GET', 'POST'] }));\napp.use(function(err, req, res, next) {\n    if (err.code !== 'EBADCSRFTOKEN') return next(err)\n    // handle CSRF token errors here\n    res.status(403)\n    res.send('form tampered with')\n})\n\n// 记录访问日志\nif (start_log) {\n    const logDirectory = path.join(__dirname, 'logs');\n    fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory); // 日志目录不存在创建目录\n    const logerFile = 'access_' + sillyDateTime.format(new Date(), 'YYYY_MMM_DD') + '.log';\n    const accessLogStream = rfs(logerFile, {\n        interval: '1d', // 日志切割间隔为1天，以s,m,h,d为单位\n        path: logDirectory, // 日志保存路径，\n        size: '1M', // 单个日志文件的大小，以B,K,M,G为单位\n        compress: true // 压缩日志\n    });\n    app.use(morgan('combined', { stream: accessLogStream }));\n}\n\n// 添加一个虚拟机\n// app.use(vhost('images.mcloudhub.com',(req,res,next)=>{\n//     options = {\n//         key: fs.readFileSync(__dirname+'/ssl/214517687450776.key'),\n//         cert: fs.readFileSync(__dirname+'/ssl/214517687450776.pem')\n//     };\n//     app.use('/public', express.static(__dirname + '/public'));\n//     next();\n// }));\n\n// 设置ftp路由\napp.use('/ftp', express.static(__dirname+'/ftp'), serveIndex(__dirname+'/ftp', {'icons': true}));\n \n// Listen\napp.listen(3000)\n//设置响应头\n// app.setHeader('content-type', 'text-css');\n//设置静态文件托管\napp.use('/public', express.static(__dirname + '/public'));\napp.use('/download', express.static(__dirname + '/download'));\n//  app.use();\n// app.get('/', (req, res, next) => {\n//     //  res.send('Hello Word')\n//     res.render('index', );\n// });\n// app.use('/admin', require('./routers/admin'));\n\n// 定义路由\napp.use('/api', require('./routers/api'));\napp.use('/', require('./routers/main'));\napp.use('/article', require('./routers/article'));\napp.use('/setting', require('./routers/setting'));\napp.use('/photos', require('./routers/photos'));\n\n//设置响应头\n//  app.setHeader('content-type','text-css');\n//  app.set('*/css',(req,res,next)=>{\n//      res.render('bbody{background:#FFF;}');\n//  });\n\n//连接数据库\nmongoose.connect('mongodb://localhost:27017/blog', (err, res) => {\n    if (err) {\n        console.log(err);\n    } else {\n        // 数据库连接成功后监听80/443端口\n        // app.listen(80);\n        http.createServer(app).listen(80);\n        // https.createServer(options, app).listen(443);\n        http2.createServer(options, app).listen(443);\n    }\n});\n// app.listen(8080);"]}