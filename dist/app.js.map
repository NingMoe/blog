{"version":3,"sources":["../app.js"],"names":["os","require","path","assert","express","debug","supportsColor","favicon","morgan","rfs","http","http2","fs","OAuthServer","cookieParser","session","webSocket","MongoDBStore","csurf","swig","mongoose","Promise","bodyParser","sillyDateTime","serveIndex","uuidv4","expressRequestId","expressCurl","app","start_log","options","key","readFileSync","join","__dirname","cert","engine","renderFile","set","setDefaults","cache","use","urlencoded","extended","json","limit","maxAge","secure","oauth","model","grants","allowBearerTokensInQueryString","accessTokenLifetime","store","uri","databaseName","collection","err","on","ifError","error","ok","genid","req","secret","resave","saveUninitialized","cookie","rolling","res","next","cookies","uid","e","console","log","platform","ignoreMethods","code","status","send","logDirectory","existsSync","mkdirSync","logerFile","format","Date","accessLogStream","interval","size","compress","stream","static","get","render","title","connect","createServer","listen","server","wss","Server","stdout","stderr","has16m","has256","enabled","connection","ws","incoming","message","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["/*\n * 项目入口\n */\nconst os = require('os');\nconst path = require('path');\nconst assert = require('assert');\nconst express = require('express');\nconst debug = require('debug')('blog:server')\nconst supportsColor = require('supports-color');\nconst favicon = require('serve-favicon');\nconst morgan = require('morgan');\nconst rfs = require('rotating-file-stream');\n// const vhost = require('vhost');\nconst http = require('http');\n// https模块还是测试模块，所以在这里不使用\n// const https = require('https');\n//引入http2模块\nconst http2 = require('spdy');\nconst fs = require('fs');\n// const oauth2server = require('oauth2-server');\nconst OAuthServer = require('express-oauth-server');\nconst cookieParser = require('cookie-parser');\nconst session = require('express-session');\nconst webSocket = require('ws');\nconst MongoDBStore = require('connect-mongodb-session')(session);\nconst csurf = require('csurf');\nconst swig = require('swig');\nconst mongoose = require('mongoose');\nmongoose.Promise = require('bluebird');\nconst bodyParser = require('body-parser');\nconst sillyDateTime = require('silly-datetime');\nconst serveIndex = require('serve-index');\nconst uuidv4 = require('uuid/v4');\nconst expressRequestId = require('express-request-id')();\nconst expressCurl = require('express-curl');\nconst app = express();\n\n// const expressWS = require('express-ws')(app);\n//是否启动记录访问日志\nconst start_log = true;\nlet options = {\n    key: fs.readFileSync(path.join(__dirname + '/ssl/214483626110776.key')),\n    cert: fs.readFileSync(path.join(__dirname + '/ssl/214483626110776.pem'))\n};\n\n//设置模板引擎\napp.engine('swg', swig.renderFile);\n//  设置模板路径\napp.set('views', path.join(__dirname, '/app/views'));\n// 注册模板\napp.set('view engine', 'swg');\n// 将模板缓存设置false\nswig.setDefaults({ cache: false });\n// 设置request id\napp.use(expressRequestId);\n// extends设置true表示接收的数据是数组，false表示是字符串\napp.use(bodyParser.urlencoded({ extended: true }));\n// 将提交的数据转成json,并且设置请求实体大小\napp.use(bodyParser.json({ limit: '50mb' }));\napp.use(bodyParser.urlencoded({ limit: '50mb', extended: true }));\napp.use(cookieParser('session_id', { maxAge: 1800000, secure: true }));\n// app.use(expressCurl);\n\napp.oauth = new OAuthServer({\n    model: require(__dirname + '/app/models/Oauth_model'), // See below for specification\n    grants: ['password', 'refresh_token'],\n    debug: true,\n    allowBearerTokensInQueryString: true,\n    accessTokenLifetime: 4 * 60 * 60\n        // accessTokenLifetime: Number,\n        // refreshTokenLifetime: Number,\n        // authCodeLifetime: Number,\n        // clientIdRegex: regexp,\n        // passthroughErrors: Boolean,\n        // continueAfterResponse: Boolean\n\n});\n\n// app.use(app.oauth.authorize());\n\n// app.use(function(req, res) {\n//   res.send('Secret area');\n// });\n\n// const Request = oauth2server.Request;\n// const Response = oauth2server.Response;\n// app.use(app.oauth.authorize(Request,Response));\n// app.use(function(req, res) {\n//   res.send('Secret area');\n// });\n\nconst store = new MongoDBStore({\n    uri: 'mongodb://localhost:27017',\n    databaseName: 'blog',\n    collection: 'sessions'\n}, err => {\n    if (err) throw err;\n});\n\nstore.on('error', error => {\n    assert.ifError(error);\n    assert.ok(false);\n});\n\napp.use(session({\n    genid: function(req) {\n        return uuidv4() // use UUIDs for session IDs\n    },\n    secret: 'session_id', // 与cookieParser中的一致\n    resave: true,\n    store: store, // 将session保存到mongodb中\n    saveUninitialized: true,\n    cookie: {\n        secure: true,\n        maxAge: 1800000,\n    },\n    rolling: true\n}));\n// 服务器启动时默认配置/动作\napp.use(function(req, res, next) {\n    // //将登录后的用户信息附加到request头信息中\n    if (req.cookies.uid && req.cookies.uid != '') {\n        try {\n            req.session.uid = req.cookies.uid;\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    // 将系统类型添加到cookies和请求头中;\n    // os.platform return now node runing systems : darwin=>MAC win32=>windows\n    res.cookie('platform', os.platform);\n    req.platform = os.platform;\n    next();\n});\n\napp.use(csurf({ cookie: true, ignoreMethods: ['GET', 'POST'] }));\napp.use(function(err, req, res, next) {\n    if (err.code !== 'EBADCSRFTOKEN') return next(err)\n        // handle CSRF token errors here\n    res.status(403)\n    res.send('form tampered with')\n});\n\n// 记录访问日志\nif (start_log) {\n    const logDirectory = path.join(__dirname, 'logs');\n    fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory); // 日志目录不存在创建目录\n    const logerFile = 'access_' + sillyDateTime.format(new Date(), 'YYYY_MMM_DD') + '.log';\n    const accessLogStream = rfs(logerFile, {\n        interval: '1d', // 日志切割间隔为1天，以s,m,h,d为单位\n        path: logDirectory, // 日志保存路径，\n        size: '1M', // 单个日志文件的大小，以B,K,M,G为单位\n        compress: true // 压缩日志\n    });\n    app.use(morgan('combined', { stream: accessLogStream }));\n}\n\n// 添加一个虚拟机\n// app.use(vhost('images.mcloudhub.com',(req,res,next)=>{\n//     options = {\n//         key: fs.readFileSync(__dirname+'/ssl/214517687450776.key'),\n//         cert: fs.readFileSync(__dirname+'/ssl/214517687450776.pem')\n//     };\n//     app.use('/public', express.static(__dirname + '/public'));\n//     next();\n// }));\n\n// 设置ftp路由\napp.use('/ftp', express.static(path.join(__dirname, '/app/ftp')), serveIndex(path.join(__dirname, '/app/ftp'), { 'icons': true }));\n\n// Listen\n// app.listen(3000)\n//设置响应头\n// app.setHeader('content-type', 'text-css');\n//设置静态文件托管\napp.use('/public', express.static(path.join(__dirname, '/app/public')));\napp.use('/download', express.static(path.join(__dirname, '/app/download')));\napp.use(favicon(path.join(__dirname,'app/public/images','favicon.ico')));\n//  app.use();\n// app.get('/', (req, res, next) => {\n//     //  res.send('Hello Word')\n//     res.render('index', );\n// });\n// app.use('/admin', require('./routers/admin'));\n\n// 定义路由www\napp.use('/api', require(path.join(__dirname, '/app/routers/api')));\napp.use('/', require(path.join(__dirname, '/app/routers/main')));\napp.use('/article', require(path.join(__dirname, '/app/routers/article')));\napp.use('/setting', require(path.join(__dirname, '/app/routers/setting')));\napp.use('/photos', require(path.join(__dirname, '/app/routers/photos')));\napp.use('/resume', require(path.join(__dirname, '/app/routers/resume')));\napp.use('/oauth', require(path.join(__dirname, '/app/routers/oauth')));\n// app.all('/oauth/token', app.oauth.grant());\n\n//设置响应头\n//  app.setHeader('content-type','text-css');\n//  app.set('*/css',(req,res,next)=>{\n//      res.render('bbody{background:#FFF;}');\n//  });\n\n// 处理404请求\n\napp.get('*',(req, res)=>{\n    res.render(path.join(__dirname, '/app/views/404'),{\n        title:'No Found'\n    });\n});\n\n// 处理500请求\n\n//连接数据库\nmongoose.connect('mongodb://localhost:27017/blog', (err, res) => {\n    if (err) {\n        console.log(err);\n    } else {\n        // 数据库连接成功后监听80/443端口\n        // app.listen(80);\n        http.createServer(app).listen(80);\n        // https.createServer(options, app).listen(443);\n        const server = http2.createServer(options, app);\n        const wss = new webSocket.Server({ server });\n\n\n        if (supportsColor.stdout) {\n            console.log('Terminal stdout supports color');\n        }\n\n        if (supportsColor.stderr.has16m) {\n            console.log('Terminal stderr supports 16 million colors (truecolor)');\n        }\n\n        if (supportsColor.stdout.has256) {\n            console.log('Terminal stdout supports 256 colors');\n        }\n\n        if(debug.enabled){\n            debug('server is `starting` listen `443` project `blog` run_model DEBUG');\n        }\n\n        // 返回进程环境信息\n        // console.log(process.env);\n\n        wss.on('connection', function connection(ws, req) {\n            console.log(req);\n            console.log(ws);\n            // const location = url.parse(req.url, true);\n              // You might use location.query.access_token to authenticate or share sessions\n              // or req.headers.cookie (see http://stackoverflow.com/a/16395220/151312)\n\n            ws.on('message', function incoming(message) {\n                ws.send(message);\n                console.log('received: %s', message);\n            });\n\n            ws.send('something');\n        });\n        server.listen(443);\n\n    }\n});\n// app.listen(8080);\n\nmodule.exports = app;"]}