{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/solr/solr.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","isStringChar","isOperatorChar","isOperatorString","isNumber","word","parseFloat","toString","tokenString","quote","stream","state","escaped","next","tokenize","tokenBase","tokenOperator","operator","style","eat","tokenWord","ch","peek","match","test","startState","token","eatSpace","defineMIME"],"mappings":"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","file":"solr.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"solr\", function() {\n  \"use strict\";\n\n  var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\^\\\"\\\\]/;\n  var isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\n  var isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\n  function isNumber(word) {\n    return parseFloat(word, 10).toString() === word;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenOperator(operator) {\n    return function(stream, state) {\n      var style = \"operator\";\n      if (operator == \"+\")\n        style += \" positive\";\n      else if (operator == \"-\")\n        style += \" negative\";\n      else if (operator == \"|\")\n        stream.eat(/\\|/);\n      else if (operator == \"&\")\n        stream.eat(/\\&/);\n      else if (operator == \"^\")\n        style += \" boost\";\n\n      state.tokenize = tokenBase;\n      return style;\n    };\n  }\n\n  function tokenWord(ch) {\n    return function(stream, state) {\n      var word = ch;\n      while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n        word += stream.next();\n      }\n\n      state.tokenize = tokenBase;\n      if (isOperatorString.test(word))\n        return \"operator\";\n      else if (isNumber(word))\n        return \"number\";\n      else if (stream.peek() == \":\")\n        return \"field\";\n      else\n        return \"string\";\n    };\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"')\n      state.tokenize = tokenString(ch);\n    else if (isOperatorChar.test(ch))\n      state.tokenize = tokenOperator(ch);\n    else if (isStringChar.test(ch))\n      state.tokenize = tokenWord(ch);\n\n    return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-solr\", \"solr\");\n\n});\n"]}