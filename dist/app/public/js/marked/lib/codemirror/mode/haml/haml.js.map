{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/haml/haml.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","htmlMode","getMode","name","rubyMode","rubyInQuote","endQuote","stream","state","ch","peek","rubyState","tokenize","length","next","html","ruby","match","skipToEnd","token","previousToken","style","indented","startOfLine","htmlState","startState","copyState","sol","indentation","eatSpace","eol","backUp","defineMIME"],"mappings":"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","file":"haml.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../ruby/ruby\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../ruby/ruby\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\n  // full haml mode. This handled embeded ruby and html fragments too\n  CodeMirror.defineMode(\"haml\", function(config) {\n    var htmlMode = CodeMirror.getMode(config, {name: \"htmlmixed\"});\n    var rubyMode = CodeMirror.getMode(config, \"ruby\");\n\n    function rubyInQuote(endQuote) {\n      return function(stream, state) {\n        var ch = stream.peek();\n        if (ch == endQuote && state.rubyState.tokenize.length == 1) {\n          // step out of ruby context as it seems to complete processing all the braces\n          stream.next();\n          state.tokenize = html;\n          return \"closeAttributeTag\";\n        } else {\n          return ruby(stream, state);\n        }\n      };\n    }\n\n    function ruby(stream, state) {\n      if (stream.match(\"-#\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      return rubyMode.token(stream, state.rubyState);\n    }\n\n    function html(stream, state) {\n      var ch = stream.peek();\n\n      // handle haml declarations. All declarations that cant be handled here\n      // will be passed to html mode\n      if (state.previousToken.style == \"comment\" ) {\n        if (state.indented > state.previousToken.indented) {\n          stream.skipToEnd();\n          return \"commentLine\";\n        }\n      }\n\n      if (state.startOfLine) {\n        if (ch == \"!\" && stream.match(\"!!\")) {\n          stream.skipToEnd();\n          return \"tag\";\n        } else if (stream.match(/^%[\\w:#\\.]+=/)) {\n          state.tokenize = ruby;\n          return \"hamlTag\";\n        } else if (stream.match(/^%[\\w:]+/)) {\n          return \"hamlTag\";\n        } else if (ch == \"/\" ) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (state.startOfLine || state.previousToken.style == \"hamlTag\") {\n        if ( ch == \"#\" || ch == \".\") {\n          stream.match(/[\\w-#\\.]*/);\n          return \"hamlAttribute\";\n        }\n      }\n\n      // donot handle --> as valid ruby, make it HTML close comment instead\n      if (state.startOfLine && !stream.match(\"-->\", false) && (ch == \"=\" || ch == \"-\" )) {\n        state.tokenize = ruby;\n        return state.tokenize(stream, state);\n      }\n\n      if (state.previousToken.style == \"hamlTag\" ||\n          state.previousToken.style == \"closeAttributeTag\" ||\n          state.previousToken.style == \"hamlAttribute\") {\n        if (ch == \"(\") {\n          state.tokenize = rubyInQuote(\")\");\n          return state.tokenize(stream, state);\n        } else if (ch == \"{\") {\n          state.tokenize = rubyInQuote(\"}\");\n          return state.tokenize(stream, state);\n        }\n      }\n\n      return htmlMode.token(stream, state.htmlState);\n    }\n\n    return {\n      // default to html mode\n      startState: function() {\n        var htmlState = htmlMode.startState();\n        var rubyState = rubyMode.startState();\n        return {\n          htmlState: htmlState,\n          rubyState: rubyState,\n          indented: 0,\n          previousToken: { style: null, indented: 0},\n          tokenize: html\n        };\n      },\n\n      copyState: function(state) {\n        return {\n          htmlState : CodeMirror.copyState(htmlMode, state.htmlState),\n          rubyState: CodeMirror.copyState(rubyMode, state.rubyState),\n          indented: state.indented,\n          previousToken: state.previousToken,\n          tokenize: state.tokenize\n        };\n      },\n\n      token: function(stream, state) {\n        if (stream.sol()) {\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        state.startOfLine = false;\n        // dont record comment line as we only want to measure comment line with\n        // the opening comment block\n        if (style && style != \"commentLine\") {\n          state.previousToken = { style: style, indented: state.indented };\n        }\n        // if current state is ruby and the previous token is not `,` reset the\n        // tokenize to html\n        if (stream.eol() && state.tokenize == ruby) {\n          stream.backUp(1);\n          var ch = stream.peek();\n          stream.next();\n          if (ch && ch != \",\") {\n            state.tokenize = html;\n          }\n        }\n        // reprocess some of the specific style tag when finish setting previousToken\n        if (style == \"hamlTag\") {\n          style = \"tag\";\n        } else if (style == \"commentLine\") {\n          style = \"comment\";\n        } else if (style == \"hamlAttribute\") {\n          style = \"attribute\";\n        } else if (style == \"closeAttributeTag\") {\n          style = null;\n        }\n        return style;\n      }\n    };\n  }, \"htmlmixed\", \"ruby\");\n\n  CodeMirror.defineMIME(\"text/x-haml\", \"haml\");\n});\n"]}