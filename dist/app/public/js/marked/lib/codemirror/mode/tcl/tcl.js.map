{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/tcl/tcl.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","keywords","functions","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inParams","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","skipTo","word","current","toLowerCase","propertyIsEnumerable","quote","escaped","end","maybeEnd","startState","token","eatSpace","defineMIME"],"mappings":"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","file":"tcl.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n//tcl mode by Ford_Lawnmower :: Based on Velocity mode by Steve O'Hara\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"tcl\", function() {\n  function parseWords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" +\n        \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" +\n        \"binary break catch cd close concat continue dde eof encoding error \" +\n        \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" +\n        \"filename flush for foreach format gets glob global history http if \" +\n        \"incr info interp join lappend lindex linsert list llength load lrange \" +\n        \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" +\n        \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" +\n        \"registry regsub rename resource return scan seek set socket source split \" +\n        \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" +\n        \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" +\n        \"tclvars tell time trace unknown unset update uplevel upvar variable \" +\n    \"vwait\");\n    var functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\n    var isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n      if ((ch == '\"' || ch == \"'\") && state.inParams)\n        return chain(stream, state, tokenString(ch));\n      else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;\n        else if (ch == \")\") state.inParams = false;\n          return null;\n      }\n      else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      else if (ch == \"#\" && stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      }\n      else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n        return chain(stream, state, tokenUnparsed);\n      }\n      else if (ch == \"#\" && stream.eat(\"#\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      else if (ch == '\"') {\n        stream.skipTo(/\"/);\n        return \"comment\";\n      }\n      else if (ch == \"$\") {\n        stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n        stream.eatWhile(/}/);\n        state.beforeParams = true;\n        return \"builtin\";\n      }\n      else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"comment\";\n      }\n      else {\n        stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n        var word = stream.current().toLowerCase();\n        if (keywords && keywords.propertyIsEnumerable(word))\n          return \"keyword\";\n        if (functions && functions.propertyIsEnumerable(word)) {\n          state.beforeParams = true;\n          return \"keyword\";\n        }\n        return null;\n      }\n    }\n    function tokenString(quote) {\n      return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false, ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = (ch == \"*\");\n      }\n      return \"comment\";\n    }\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0, ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        if (ch == \"]\")\n          maybeEnd++;\n        else if (ch != \" \")\n          maybeEnd = 0;\n      }\n      return \"meta\";\n    }\n    return {\n      startState: function() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false\n        };\n      },\n      token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      }\n    };\n});\nCodeMirror.defineMIME(\"text/x-tcl\", \"tcl\");\n\n});\n"]}