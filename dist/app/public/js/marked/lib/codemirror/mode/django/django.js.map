{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/django/django.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","keywords","RegExp","join","tokenBase","stream","state","eatWhile","ch","next","eat","tokenize","inTag","close","match","startState","token","config","htmlBase","getMode","djangoInner","overlayMode","defineMIME"],"mappings":"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","file":"django.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"),\n        require(\"../../addon/mode/overlay\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\",\n            \"../../addon/mode/overlay\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"django:inner\", function() {\n    var keywords = [\"block\", \"endblock\", \"for\", \"endfor\", \"in\", \"true\", \"false\",\n                    \"loop\", \"none\", \"self\", \"super\", \"if\", \"endif\", \"as\", \"not\", \"and\",\n                    \"else\", \"import\", \"with\", \"endwith\", \"without\", \"context\", \"ifequal\", \"endifequal\",\n                    \"ifnotequal\", \"endifnotequal\", \"extends\", \"include\", \"load\", \"length\", \"comment\",\n                    \"endcomment\", \"empty\"];\n    keywords = new RegExp(\"^((\" + keywords.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      stream.eatWhile(/[^\\{]/);\n      var ch = stream.next();\n      if (ch == \"{\") {\n        if (ch = stream.eat(/\\{|%|#/)) {\n          state.tokenize = inTag(ch);\n          return \"tag\";\n        }\n      }\n    }\n    function inTag (close) {\n      if (close == \"{\") {\n        close = \"}\";\n      }\n      return function (stream, state) {\n        var ch = stream.next();\n        if ((ch == close) && stream.eat(\"}\")) {\n          state.tokenize = tokenBase;\n          return \"tag\";\n        }\n        if (stream.match(keywords)) {\n          return \"keyword\";\n        }\n        return close == \"#\" ? \"comment\" : \"string\";\n      };\n    }\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"django\", function(config) {\n    var htmlBase = CodeMirror.getMode(config, \"text/html\");\n    var djangoInner = CodeMirror.getMode(config, \"django:inner\");\n    return CodeMirror.overlayMode(htmlBase, djangoInner);\n  });\n\n  CodeMirror.defineMIME(\"text/x-django\", \"django\");\n});\n"]}