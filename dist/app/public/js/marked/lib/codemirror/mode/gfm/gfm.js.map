{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/gfm/gfm.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","modeConfig","codeDepth","blankLine","state","code","gfmOverlay","startState","codeBlock","ateSpace","copyState","s","token","stream","combineTokens","match","skipToEnd","sol","peek","next","before","pos","eatWhile","difference","eatSpace","string","slice","start","markdownConfig","underscoresBreakWords","taskLists","fencedCodeBlocks","strikethrough","attr","name","defineMIME","overlayMode","getMode"],"mappings":"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","file":"gfm.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../markdown/markdown\"), require(\"../../addon/mode/overlay\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../markdown/markdown\", \"../../addon/mode/overlay\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"gfm\", function(config, modeConfig) {\n  var codeDepth = 0;\n  function blankLine(state) {\n    state.code = false;\n    return null;\n  }\n  var gfmOverlay = {\n    startState: function() {\n      return {\n        code: false,\n        codeBlock: false,\n        ateSpace: false\n      };\n    },\n    copyState: function(s) {\n      return {\n        code: s.code,\n        codeBlock: s.codeBlock,\n        ateSpace: s.ateSpace\n      };\n    },\n    token: function(stream, state) {\n      state.combineTokens = null;\n\n      // Hack to prevent formatting override inside code blocks (block and inline)\n      if (state.codeBlock) {\n        if (stream.match(/^```/)) {\n          state.codeBlock = false;\n          return null;\n        }\n        stream.skipToEnd();\n        return null;\n      }\n      if (stream.sol()) {\n        state.code = false;\n      }\n      if (stream.sol() && stream.match(/^```/)) {\n        stream.skipToEnd();\n        state.codeBlock = true;\n        return null;\n      }\n      // If this block is changed, it may need to be updated in Markdown mode\n      if (stream.peek() === '`') {\n        stream.next();\n        var before = stream.pos;\n        stream.eatWhile('`');\n        var difference = 1 + stream.pos - before;\n        if (!state.code) {\n          codeDepth = difference;\n          state.code = true;\n        } else {\n          if (difference === codeDepth) { // Must be exact\n            state.code = false;\n          }\n        }\n        return null;\n      } else if (state.code) {\n        stream.next();\n        return null;\n      }\n      // Check if space. If so, links can be formatted later on\n      if (stream.eatSpace()) {\n        state.ateSpace = true;\n        return null;\n      }\n      if (stream.sol() || state.ateSpace) {\n        state.ateSpace = false;\n        if(stream.match(/^(?:[a-zA-Z0-9\\-_]+\\/)?(?:[a-zA-Z0-9\\-_]+@)?(?:[a-f0-9]{7,40}\\b)/)) {\n          // User/Project@SHA\n          // User@SHA\n          // SHA\n          state.combineTokens = true;\n          return \"link\";\n        } else if (stream.match(/^(?:[a-zA-Z0-9\\-_]+\\/)?(?:[a-zA-Z0-9\\-_]+)?#[0-9]+\\b/)) {\n          // User/Project#Num\n          // User#Num\n          // #Num\n          state.combineTokens = true;\n          return \"link\";\n        }\n      }\n      if (stream.match(/^((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]|\\([^\\s()<>]*\\))+(?:\\([^\\s()<>]*\\)|[^\\s`*!()\\[\\]{};:'\".,<>?«»“”‘’]))/i) &&\n         stream.string.slice(stream.start - 2, stream.start) != \"](\") {\n        // URLs\n        // Taken from http://daringfireball.net/2010/07/improved_regex_for_matching_urls\n        // And then (issue #1160) simplified to make it not crash the Chrome Regexp engine\n        state.combineTokens = true;\n        return \"link\";\n      }\n      stream.next();\n      return null;\n    },\n    blankLine: blankLine\n  };\n\n  var markdownConfig = {\n    underscoresBreakWords: false,\n    taskLists: true,\n    fencedCodeBlocks: true,\n    strikethrough: true\n  };\n  for (var attr in modeConfig) {\n    markdownConfig[attr] = modeConfig[attr];\n  }\n  markdownConfig.name = \"markdown\";\n  CodeMirror.defineMIME(\"gfmBase\", markdownConfig);\n  return CodeMirror.overlayMode(CodeMirror.getMode(config, \"gfmBase\"), gfmOverlay);\n}, \"markdown\");\n\n});\n"]}