{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/http/http.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","failFirstLine","stream","state","skipToEnd","cur","header","start","match","responseStatusCode","test","peek","requestPath","code","responseStatusText","status","Number","eatWhile","requestProtocol","sol","eat","body","token","eatSpace","blankLine","startState","defineMIME"],"mappings":"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","file":"http.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"http\", function() {\n  function failFirstLine(stream, state) {\n    stream.skipToEnd();\n    state.cur = header;\n    return \"error\";\n  }\n\n  function start(stream, state) {\n    if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n      state.cur = responseStatusCode;\n      return \"keyword\";\n    } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n      state.cur = requestPath;\n      return \"keyword\";\n    } else {\n      return failFirstLine(stream, state);\n    }\n  }\n\n  function responseStatusCode(stream, state) {\n    var code = stream.match(/^\\d+/);\n    if (!code) return failFirstLine(stream, state);\n\n    state.cur = responseStatusText;\n    var status = Number(code[0]);\n    if (status >= 100 && status < 200) {\n      return \"positive informational\";\n    } else if (status >= 200 && status < 300) {\n      return \"positive success\";\n    } else if (status >= 300 && status < 400) {\n      return \"positive redirect\";\n    } else if (status >= 400 && status < 500) {\n      return \"negative client-error\";\n    } else if (status >= 500 && status < 600) {\n      return \"negative server-error\";\n    } else {\n      return \"error\";\n    }\n  }\n\n  function responseStatusText(stream, state) {\n    stream.skipToEnd();\n    state.cur = header;\n    return null;\n  }\n\n  function requestPath(stream, state) {\n    stream.eatWhile(/\\S/);\n    state.cur = requestProtocol;\n    return \"string-2\";\n  }\n\n  function requestProtocol(stream, state) {\n    if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n      state.cur = header;\n      return \"keyword\";\n    } else {\n      return failFirstLine(stream, state);\n    }\n  }\n\n  function header(stream) {\n    if (stream.sol() && !stream.eat(/[ \\t]/)) {\n      if (stream.match(/^.*?:/)) {\n        return \"atom\";\n      } else {\n        stream.skipToEnd();\n        return \"error\";\n      }\n    } else {\n      stream.skipToEnd();\n      return \"string\";\n    }\n  }\n\n  function body(stream) {\n    stream.skipToEnd();\n    return null;\n  }\n\n  return {\n    token: function(stream, state) {\n      var cur = state.cur;\n      if (cur != header && cur != body && stream.eatSpace()) return null;\n      return cur(stream, state);\n    },\n\n    blankLine: function(state) {\n      state.cur = body;\n    },\n\n    startState: function() {\n      return {cur: start};\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"message/http\", \"http\");\n\n});\n"]}