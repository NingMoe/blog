{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/dart/dart.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","keywords","split","blockKeywords","atoms","builtins","set","words","obj","i","length","defineMIME","name","multiLineStrings","builtin","hooks","stream","eatWhile","registerHelper","concat","defineMode","conf","getMode"],"mappings":";;;;AAAA;AACA;;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,QAAOC,OAAP,yCAAOA,OAAP,MAAkB,QAAlB,IAA8B,QAAOC,MAAP,yCAAOA,MAAP,MAAiB,QAAnD,EAA6D;AAC3DF,QAAIG,QAAQ,sBAAR,CAAJ,EAAqCA,QAAQ,gBAAR,CAArC,EADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,OAAOC,GAA1C,EAA+C;AAClDD,WAAO,CAAC,sBAAD,EAAyB,gBAAzB,CAAP,EAAmDJ,GAAnD,EADG,KAEA;AACHA,QAAIM,UAAJ;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACtB;;AAEA,MAAIC,WAAW,CAAC,2EACd,qEADc,GAEd,wEAFc,GAGd,sEAHc,GAId,sBAJa,EAIWC,KAJX,CAIiB,GAJjB,CAAf;AAKA,MAAIC,gBAAgB,gDAAgDD,KAAhD,CAAsD,GAAtD,CAApB;AACA,MAAIE,QAAQ,kBAAkBF,KAAlB,CAAwB,GAAxB,CAAZ;AACA,MAAIG,WAAW,8CAA8CH,KAA9C,CAAoD,GAApD,CAAf;;AAEA,WAASI,GAAT,CAAaC,KAAb,EAAoB;AAClB,QAAIC,MAAM,EAAV;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkC,EAAED,CAApC;AAAuCD,UAAID,MAAME,CAAN,CAAJ,IAAgB,IAAhB;AAAvC,KACA,OAAOD,GAAP;AACD;;AAEDR,aAAWW,UAAX,CAAsB,kBAAtB,EAA0C;AACxCC,UAAM,OADkC;AAExCX,cAAUK,IAAIL,QAAJ,CAF8B;AAGxCY,sBAAkB,IAHsB;AAIxCV,mBAAeG,IAAIH,aAAJ,CAJyB;AAKxCW,aAASR,IAAID,QAAJ,CAL+B;AAMxCD,WAAOE,IAAIF,KAAJ,CANiC;AAOxCW,WAAO;AACL,WAAK,WAASC,MAAT,EAAiB;AACpBA,eAAOC,QAAP,CAAgB,SAAhB;AACA,eAAO,MAAP;AACD;AAJI;AAPiC,GAA1C;;AAeAjB,aAAWkB,cAAX,CAA0B,WAA1B,EAAuC,kBAAvC,EAA2DjB,SAASkB,MAAT,CAAgBf,KAAhB,EAAuBe,MAAvB,CAA8Bd,QAA9B,CAA3D;;AAEA;AACAL,aAAWoB,UAAX,CAAsB,MAAtB,EAA8B,UAASC,IAAT,EAAe;AAC3C,WAAOrB,WAAWsB,OAAX,CAAmBD,IAAnB,EAAyB,kBAAzB,CAAP;AACD,GAFD,EAEG,OAFH;AAGD,CA9CD","file":"dart.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../clike/clike\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../clike/clike\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var keywords = (\"this super static final const abstract class extends external factory \" +\n    \"implements get native operator set typedef with enum throw rethrow \" +\n    \"assert break case continue default in return new deferred async await \" +\n    \"try catch finally do else for if switch while import library export \" +\n    \"part of show hide is\").split(\" \");\n  var blockKeywords = \"try catch finally do else for if switch while\".split(\" \");\n  var atoms = \"true false null\".split(\" \");\n  var builtins = \"void bool num int double dynamic var String\".split(\" \");\n\n  function set(words) {\n    var obj = {};\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  CodeMirror.defineMIME(\"application/dart\", {\n    name: \"clike\",\n    keywords: set(keywords),\n    multiLineStrings: true,\n    blockKeywords: set(blockKeywords),\n    builtin: set(builtins),\n    atoms: set(atoms),\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n\n  CodeMirror.registerHelper(\"hintWords\", \"application/dart\", keywords.concat(atoms).concat(builtins));\n\n  // This is needed to make loading through meta.js work.\n  CodeMirror.defineMode(\"dart\", function(conf) {\n    return CodeMirror.getMode(conf, \"application/dart\");\n  }, \"clike\");\n});\n"]}