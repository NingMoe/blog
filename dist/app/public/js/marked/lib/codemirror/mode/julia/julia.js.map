{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/julia/julia.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","_conf","parserConf","ERRORCLASS","wordRegexp","words","RegExp","join","operators","delimiters","identifiers","blockOpeners","blockClosers","keywordList","builtinList","stringPrefixes","keywords","builtins","openers","closers","macro","symbol","indentInfo","in_array","state","ch","cur_scope","scopes","length","tokenBase","stream","leaving_expr","sol","match","eatSpace","peek","skipToEnd","push","scope","pop","imMatcher","floatLiteral","intLiteral","tokenize","tokenStringFactory","current","next","delimiter","indexOf","charAt","toLowerCase","substr","singleline","OUTCLASS","tokenString","eol","eatWhile","eat","singleLineStringErrors","isString","tokenLexer","style","lastStyle","external","startState","token","indent","textAfter","delta","lineComment","fold","electricChars","defineMIME"],"mappings":";;;;AAAA;AACA;;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,QAAOC,OAAP,yCAAOA,OAAP,MAAkB,QAAlB,IAA8B,QAAOC,MAAP,yCAAOA,MAAP,MAAiB,QAAnD,EAA6D;AAC3DF,QAAIG,QAAQ,sBAAR,CAAJ,EADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,OAAOC,GAA1C,EAA+C;AAClDD,WAAO,CAAC,sBAAD,CAAP,EAAiCJ,GAAjC,EADG,KAEA;AACHA,QAAIM,UAAJ;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACxB;;AAEAA,aAAWC,UAAX,CAAsB,OAAtB,EAA+B,UAASC,KAAT,EAAgBC,UAAhB,EAA4B;AACzD,QAAIC,aAAa,OAAjB;;AAEA,aAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,aAAO,IAAIC,MAAJ,CAAW,QAAQD,MAAME,IAAN,CAAW,KAAX,CAAR,GAA4B,OAAvC,CAAP;AACD;;AAED,QAAIC,YAAYN,WAAWM,SAAX,IAAwB,gFAAxC;AACA,QAAIC,aAAaP,WAAWO,UAAX,IAAyB,cAA1C;AACA,QAAIC,cAAcR,WAAWQ,WAAX,IAAyB,qDAA3C;AACA,QAAIC,eAAe,CAAC,OAAD,EAAU,UAAV,EAAsB,MAAtB,EAA8B,WAA9B,EAA2C,KAA3C,EAAkD,OAAlD,EAA2D,KAA3D,EAAkE,OAAlE,EAA2E,OAA3E,EAAoF,IAApF,EAA0F,MAA1F,EAAkG,QAAlG,EAA4G,KAA5G,EAAmH,SAAnH,EAA8H,OAA9H,EAAuI,IAAvI,CAAnB;AACA,QAAIC,eAAe,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,SAAnC,CAAnB;AACA,QAAIC,cAAc,CAAC,IAAD,EAAO,MAAP,EAAe,QAAf,EAAyB,OAAzB,EAAkC,KAAlC,EAAyC,OAAzC,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,IAAhE,EAAsE,KAAtE,EAA6E,OAA7E,EAAsF,SAAtF,EAAiG,QAAjG,EAA2G,OAA3G,EAAoH,UAApH,EAAgI,QAAhI,EAA0I,OAA1I,EAAmJ,OAAnJ,EAA4J,QAA5J,EAAsK,QAAtK,EAAgL,WAAhL,EAA6L,OAA7L,EAAsM,UAAtM,EAAkN,OAAlN,EAA2N,QAA3N,EAAqO,YAArO,EAAmP,MAAnP,EAA2P,WAA3P,EAAwQ,OAAxQ,EAAiR,WAAjR,EAA8R,UAA9R,EAA0S,UAA1S,EAAsT,OAAtT,CAAlB;AACA,QAAIC,cAAc,CAAC,MAAD,EAAS,OAAT,EAAkB,WAAlB,EAA+B,MAA/B,EAAuC,OAAvC,EAAgD,SAAhD,EAA2D,KAA3D,EAAkE,KAAlE,EAAyE,OAAzE,EAAkF,SAAlF,EAA6F,KAA7F,EAAoG,MAApG,EAA4G,OAA5G,EAAqH,OAArH,EAA8H,QAA9H,EAAwI,OAAxI,EAAiJ,QAAjJ,EAA2J,OAA3J,EAAoK,QAApK,EAA8K,QAA9K,EAAwL,SAAxL,EAAmM,MAAnM,EAA2M,MAA3M,EAAmN,SAAnN,EAA8N,SAA9N,EAAyO,SAAzO,EAAoP,OAApP,EAA6P,QAA7P,EAAuQ,QAAvQ,EAAiR,QAAjR,EAA2R,YAA3R,EAAyS,aAAzS,EAAwT,OAAxT,EAAiU,MAAjU,EAAyU,MAAzU,EAAiV,SAAjV,CAAlB;;AAEA;AACA,QAAIC,iBAAiB,sBAArB;AACA,QAAIC,WAAWZ,WAAWS,WAAX,CAAf;AACA,QAAII,WAAWb,WAAWU,WAAX,CAAf;AACA,QAAII,UAAUd,WAAWO,YAAX,CAAd;AACA,QAAIQ,UAAUf,WAAWQ,YAAX,CAAd;AACA,QAAIQ,QAAQ,0BAAZ;AACA,QAAIC,SAAS,0BAAb;AACA,QAAIC,aAAa,IAAjB;;AAEA,aAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,UAAIC,KAAKC,UAAUF,KAAV,CAAT;AACA,UAAGC,MAAI,GAAJ,IAAWA,MAAI,GAAlB,EAAuB;AACrB,eAAO,IAAP;AACD,OAFD,MAGK;AACH,eAAO,KAAP;AACD;AACF;;AAED,aAASC,SAAT,CAAmBF,KAAnB,EAA0B;AACxB,UAAGA,MAAMG,MAAN,CAAaC,MAAb,IAAqB,CAAxB,EAA2B;AACzB,eAAO,IAAP;AACD;AACD,aAAOJ,MAAMG,MAAN,CAAaH,MAAMG,MAAN,CAAaC,MAAb,GAAsB,CAAnC,CAAP;AACD;;AAED;AACA,aAASC,SAAT,CAAmBC,MAAnB,EAA2BN,KAA3B,EAAkC;AAChC;AACA,UAAIO,eAAeP,MAAMO,YAAzB;AACA,UAAGD,OAAOE,GAAP,EAAH,EAAiB;AACfD,uBAAe,KAAf;AACD;AACDP,YAAMO,YAAN,GAAqB,KAArB;AACA,UAAGA,YAAH,EAAiB;AACf,YAAGD,OAAOG,KAAP,CAAa,KAAb,CAAH,EAAwB;AACtB,iBAAO,UAAP;AACD;AAEF;;AAED,UAAGH,OAAOG,KAAP,CAAa,UAAb,CAAH,EAA6B;AAC3B,eAAO,UAAP;AACD;;AAED,UAAIH,OAAOI,QAAP,EAAJ,EAAuB;AACrB,eAAO,IAAP;AACD;;AAED,UAAIT,KAAKK,OAAOK,IAAP,EAAT;AACA;AACA,UAAIV,OAAO,GAAX,EAAgB;AACZK,eAAOM,SAAP;AACA,eAAO,SAAP;AACH;AACD,UAAGX,OAAK,GAAR,EAAa;AACXD,cAAMG,MAAN,CAAaU,IAAb,CAAkB,GAAlB;AACD;;AAED,UAAGZ,OAAK,GAAR,EAAa;AACXD,cAAMG,MAAN,CAAaU,IAAb,CAAkB,GAAlB;AACD;;AAED,UAAIC,QAAMZ,UAAUF,KAAV,CAAV;;AAEA,UAAGc,UAAQ,GAAR,IAAeb,OAAK,GAAvB,EAA4B;AAC1BD,cAAMG,MAAN,CAAaY,GAAb;AACAf,cAAMO,YAAN,GAAmB,IAAnB;AACD;;AAED,UAAGO,UAAQ,GAAR,IAAeb,OAAK,GAAvB,EAA4B;AAC1BD,cAAMG,MAAN,CAAaY,GAAb;AACAf,cAAMO,YAAN,GAAmB,IAAnB;AACD;;AAED,UAAGN,OAAK,GAAR,EAAa;AACXD,cAAMO,YAAN,GAAqB,IAArB;AACD;;AAED,UAAIE,KAAJ;AACA,UAAG,CAACV,SAASC,KAAT,CAAD,KAAqBS,QAAMH,OAAOG,KAAP,CAAaf,OAAb,EAAsB,KAAtB,CAA3B,CAAH,EAA6D;AAC3DM,cAAMG,MAAN,CAAaU,IAAb,CAAkBJ,KAAlB;AACD;;AAED,UAAG,CAACV,SAASC,KAAT,CAAD,IAAoBM,OAAOG,KAAP,CAAad,OAAb,EAAsB,KAAtB,CAAvB,EAAqD;AACnDK,cAAMG,MAAN,CAAaY,GAAb;AACD;;AAED,UAAGhB,SAASC,KAAT,CAAH,EAAoB;AAClB,YAAGM,OAAOG,KAAP,CAAa,MAAb,CAAH,EAAyB;AACvB,iBAAO,QAAP;AACD;AAEF;;AAED,UAAGH,OAAOG,KAAP,CAAa,KAAb,CAAH,EAAwB;AACtB,eAAO,UAAP;AACD;;AAGD;AACA,UAAIH,OAAOG,KAAP,CAAa,UAAb,EAAyB,KAAzB,CAAJ,EAAqC;AACnC,YAAIO,YAAYlC,OAAO,OAAP,CAAhB;AACA,YAAImC,eAAe,KAAnB;AACA;AACA,YAAIX,OAAOG,KAAP,CAAa,mCAAb,CAAJ,EAAuD;AAAEQ,yBAAe,IAAf;AAAsB;AAC/E,YAAIX,OAAOG,KAAP,CAAa,iBAAb,CAAJ,EAAqC;AAAEQ,yBAAe,IAAf;AAAsB;AAC7D,YAAIX,OAAOG,KAAP,CAAa,QAAb,CAAJ,EAA4B;AAAEQ,yBAAe,IAAf;AAAsB;AACpD,YAAIA,YAAJ,EAAkB;AACd;AACAX,iBAAOG,KAAP,CAAaO,SAAb;AACAhB,gBAAMO,YAAN,GAAqB,IAArB;AACA,iBAAO,QAAP;AACH;AACD;AACA,YAAIW,aAAa,KAAjB;AACA;AACA,YAAIZ,OAAOG,KAAP,CAAa,eAAb,CAAJ,EAAmC;AAAES,uBAAa,IAAb;AAAoB;AACzD;AACA,YAAIZ,OAAOG,KAAP,CAAa,WAAb,CAAJ,EAA+B;AAAES,uBAAa,IAAb;AAAoB;AACrD;AACA,YAAIZ,OAAOG,KAAP,CAAa,YAAb,CAAJ,EAAgC;AAAES,uBAAa,IAAb;AAAoB;AACtD;AACA,YAAIZ,OAAOG,KAAP,CAAa,yBAAb,CAAJ,EAA6C;AACzCS,uBAAa,IAAb;AACH;AACD;AACA,YAAIZ,OAAOG,KAAP,CAAa,cAAb,CAAJ,EAAkC;AAAES,uBAAa,IAAb;AAAoB;AACxD,YAAIA,UAAJ,EAAgB;AACZ;AACAZ,iBAAOG,KAAP,CAAaO,SAAb;AACAhB,gBAAMO,YAAN,GAAqB,IAArB;AACA,iBAAO,QAAP;AACH;AACF;;AAED,UAAGD,OAAOG,KAAP,CAAa,YAAb,CAAH,EAA+B;AAC7B,eAAO,UAAP;AACD;;AAED;AACA,UAAG,CAACF,YAAD,IAAiBD,OAAOG,KAAP,CAAaZ,MAAb,CAApB,EAA0C;AACxC,eAAO,QAAP;AACD;;AAED;AACA,UAAIS,OAAOG,KAAP,CAAazB,SAAb,CAAJ,EAA6B;AAC3B,eAAO,UAAP;AACD;;AAGD;AACA,UAAIsB,OAAOG,KAAP,CAAalB,cAAb,CAAJ,EAAkC;AAChCS,cAAMmB,QAAN,GAAiBC,mBAAmBd,OAAOe,OAAP,EAAnB,CAAjB;AACA,eAAOrB,MAAMmB,QAAN,CAAeb,MAAf,EAAuBN,KAAvB,CAAP;AACD;;AAED,UAAIM,OAAOG,KAAP,CAAab,KAAb,CAAJ,EAAyB;AACvB,eAAO,MAAP;AACD;;AAGD,UAAIU,OAAOG,KAAP,CAAaxB,UAAb,CAAJ,EAA8B;AAC5B,eAAO,IAAP;AACD;;AAED,UAAIqB,OAAOG,KAAP,CAAajB,QAAb,CAAJ,EAA4B;AAC1B,eAAO,SAAP;AACD;;AAED,UAAIc,OAAOG,KAAP,CAAahB,QAAb,CAAJ,EAA4B;AAC1B,eAAO,SAAP;AACD;;AAGD,UAAIa,OAAOG,KAAP,CAAavB,WAAb,CAAJ,EAA+B;AAC7Bc,cAAMO,YAAN,GAAmB,IAAnB;AACA,eAAO,UAAP;AACD;AACD;AACAD,aAAOgB,IAAP;AACA,aAAO3C,UAAP;AACD;;AAED,aAASyC,kBAAT,CAA4BG,SAA5B,EAAuC;AACrC,aAAO,MAAMC,OAAN,CAAcD,UAAUE,MAAV,CAAiB,CAAjB,EAAoBC,WAApB,EAAd,KAAoD,CAA3D,EAA8D;AAC5DH,oBAAYA,UAAUI,MAAV,CAAiB,CAAjB,CAAZ;AACD;AACD,UAAIC,aAAaL,UAAUnB,MAAV,IAAoB,CAArC;AACA,UAAIyB,WAAW,QAAf;;AAEA,eAASC,WAAT,CAAqBxB,MAArB,EAA6BN,KAA7B,EAAoC;AAClC,eAAO,CAACM,OAAOyB,GAAP,EAAR,EAAsB;AACpBzB,iBAAO0B,QAAP,CAAgB,SAAhB;AACA,cAAI1B,OAAO2B,GAAP,CAAW,IAAX,CAAJ,EAAsB;AAClB3B,mBAAOgB,IAAP;AACA,gBAAIM,cAActB,OAAOyB,GAAP,EAAlB,EAAgC;AAC9B,qBAAOF,QAAP;AACD;AACJ,WALD,MAKO,IAAIvB,OAAOG,KAAP,CAAac,SAAb,CAAJ,EAA6B;AAChCvB,kBAAMmB,QAAN,GAAiBd,SAAjB;AACA,mBAAOwB,QAAP;AACH,WAHM,MAGA;AACHvB,mBAAO2B,GAAP,CAAW,MAAX;AACH;AACF;AACD,YAAIL,UAAJ,EAAgB;AACd,cAAIlD,WAAWwD,sBAAf,EAAuC;AACnC,mBAAOvD,UAAP;AACH,WAFD,MAEO;AACHqB,kBAAMmB,QAAN,GAAiBd,SAAjB;AACH;AACF;AACD,eAAOwB,QAAP;AACD;AACDC,kBAAYK,QAAZ,GAAuB,IAAvB;AACA,aAAOL,WAAP;AACD;;AAED,aAASM,UAAT,CAAoB9B,MAApB,EAA4BN,KAA5B,EAAmC;AACjCF,mBAAa,IAAb;AACA,UAAIuC,QAAQrC,MAAMmB,QAAN,CAAeb,MAAf,EAAuBN,KAAvB,CAAZ;AACA,UAAIqB,UAAUf,OAAOe,OAAP,EAAd;;AAEA;AACA,UAAIA,YAAY,GAAhB,EAAqB;AACnBgB,gBAAQ/B,OAAOG,KAAP,CAAavB,WAAb,EAA0B,KAA1B,IAAmC,IAAnC,GAA0CP,UAAlD;AACA,YAAI0D,UAAU,IAAV,IAAkBrC,MAAMsC,SAAN,KAAoB,MAA1C,EAAkD;AAC9C;AACA;AACFD,kBAAQ,MAAR;AACD;AACD,eAAOA,KAAP;AACD;;AAED,aAAOA,KAAP;AACD;;AAED,QAAIE,WAAW;AACbC,kBAAY,sBAAW;AACrB,eAAO;AACLrB,oBAAUd,SADL;AAELF,kBAAQ,EAFH;AAGLI,wBAAc;AAHT,SAAP;AAKD,OAPY;;AASbkC,aAAO,eAASnC,MAAT,EAAiBN,KAAjB,EAAwB;AAC7B,YAAIqC,QAAQD,WAAW9B,MAAX,EAAmBN,KAAnB,CAAZ;AACAA,cAAMsC,SAAN,GAAkBD,KAAlB;AACA,eAAOA,KAAP;AACD,OAbY;;AAebK,cAAQ,gBAAS1C,KAAT,EAAgB2C,SAAhB,EAA2B;AACjC,YAAIC,QAAQ,CAAZ;AACA,YAAGD,aAAW,KAAX,IAAoBA,aAAW,GAA/B,IAAsCA,aAAW,GAAjD,IAAwDA,aAAW,MAAnE,IAA6EA,aAAW,QAAxF,IAAoGA,aAAW,OAA/G,IAA0HA,aAAW,SAAxI,EAAmJ;AACjJC,kBAAQ,CAAC,CAAT;AACD;AACD,eAAO,CAAC5C,MAAMG,MAAN,CAAaC,MAAb,GAAsBwC,KAAvB,IAAgC,CAAvC;AACD,OArBY;;AAuBbC,mBAAa,GAvBA;AAwBbC,YAAM,QAxBO;AAyBbC,qBAAe;AAzBF,KAAf;AA2BA,WAAOR,QAAP;AACD,GA1RD;;AA6RAhE,aAAWyE,UAAX,CAAsB,cAAtB,EAAsC,OAAtC;AAEC,CAzSD","file":"julia.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"julia\", function(_conf, parserConf) {\n  var ERRORCLASS = 'error';\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var operators = parserConf.operators || /^\\.?[|&^\\\\%*+\\-<>!=\\/]=?|\\?|~|:|\\$|\\.[<>]|<<=?|>>>?=?|\\.[<>=]=|->?|\\/\\/|\\bin\\b/;\n  var delimiters = parserConf.delimiters || /^[;,()[\\]{}]/;\n  var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*!*/;\n  var blockOpeners = [\"begin\", \"function\", \"type\", \"immutable\", \"let\", \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\", \"finally\", \"catch\", \"do\"];\n  var blockClosers = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\n  var keywordList = ['if', 'else', 'elseif', 'while', 'for', 'begin', 'let', 'end', 'do', 'try', 'catch', 'finally', 'return', 'break', 'continue', 'global', 'local', 'const', 'export', 'import', 'importall', 'using', 'function', 'macro', 'module', 'baremodule', 'type', 'immutable', 'quote', 'typealias', 'abstract', 'bitstype', 'ccall'];\n  var builtinList = ['true', 'false', 'enumerate', 'open', 'close', 'nothing', 'NaN', 'Inf', 'print', 'println', 'Int', 'Int8', 'Uint8', 'Int16', 'Uint16', 'Int32', 'Uint32', 'Int64', 'Uint64', 'Int128', 'Uint128', 'Bool', 'Char', 'Float16', 'Float32', 'Float64', 'Array', 'Vector', 'Matrix', 'String', 'UTF8String', 'ASCIIString', 'error', 'warn', 'info', '@printf'];\n\n  //var stringPrefixes = new RegExp(\"^[br]?('|\\\")\")\n  var stringPrefixes = /^(`|'|\"{3}|([br]?\"))/;\n  var keywords = wordRegexp(keywordList);\n  var builtins = wordRegexp(builtinList);\n  var openers = wordRegexp(blockOpeners);\n  var closers = wordRegexp(blockClosers);\n  var macro = /^@[_A-Za-z][_A-Za-z0-9]*/;\n  var symbol = /^:[_A-Za-z][_A-Za-z0-9]*/;\n  var indentInfo = null;\n\n  function in_array(state) {\n    var ch = cur_scope(state);\n    if(ch==\"[\" || ch==\"{\") {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  function cur_scope(state) {\n    if(state.scopes.length==0) {\n      return null;\n    }\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  // tokenizers\n  function tokenBase(stream, state) {\n    // Handle scope changes\n    var leaving_expr = state.leaving_expr;\n    if(stream.sol()) {\n      leaving_expr = false;\n    }\n    state.leaving_expr = false;\n    if(leaving_expr) {\n      if(stream.match(/^'+/)) {\n        return 'operator';\n      }\n\n    }\n\n    if(stream.match(/^\\.{2,3}/)) {\n      return 'operator';\n    }\n\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    var ch = stream.peek();\n    // Handle Comments\n    if (ch === '#') {\n        stream.skipToEnd();\n        return 'comment';\n    }\n    if(ch==='[') {\n      state.scopes.push(\"[\");\n    }\n\n    if(ch==='{') {\n      state.scopes.push(\"{\");\n    }\n\n    var scope=cur_scope(state);\n\n    if(scope==='[' && ch===']') {\n      state.scopes.pop();\n      state.leaving_expr=true;\n    }\n\n    if(scope==='{' && ch==='}') {\n      state.scopes.pop();\n      state.leaving_expr=true;\n    }\n\n    if(ch===')') {\n      state.leaving_expr = true;\n    }\n\n    var match;\n    if(!in_array(state) && (match=stream.match(openers, false))) {\n      state.scopes.push(match);\n    }\n\n    if(!in_array(state) && stream.match(closers, false)) {\n      state.scopes.pop();\n    }\n\n    if(in_array(state)) {\n      if(stream.match(/^end/)) {\n        return 'number';\n      }\n\n    }\n\n    if(stream.match(/^=>/)) {\n      return 'operator';\n    }\n\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.]/, false)) {\n      var imMatcher = RegExp(/^im\\b/);\n      var floatLiteral = false;\n      // Floats\n      if (stream.match(/^\\d*\\.(?!\\.)\\d+([ef][\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n      if (stream.match(/^\\d+\\.(?!\\.)\\d*/)) { floatLiteral = true; }\n      if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n      if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.match(imMatcher);\n          state.leaving_expr = true;\n          return 'number';\n      }\n      // Integers\n      var intLiteral = false;\n      // Hex\n      if (stream.match(/^0x[0-9a-f]+/i)) { intLiteral = true; }\n      // Binary\n      if (stream.match(/^0b[01]+/i)) { intLiteral = true; }\n      // Octal\n      if (stream.match(/^0o[0-7]+/i)) { intLiteral = true; }\n      // Decimal\n      if (stream.match(/^[1-9]\\d*(e[\\+\\-]?\\d+)?/)) {\n          intLiteral = true;\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^0(?![\\dx])/i)) { intLiteral = true; }\n      if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.match(imMatcher);\n          state.leaving_expr = true;\n          return 'number';\n      }\n    }\n\n    if(stream.match(/^(::)|(<:)/)) {\n      return 'operator';\n    }\n\n    // Handle symbols\n    if(!leaving_expr && stream.match(symbol)) {\n      return 'string';\n    }\n\n    // Handle operators and Delimiters\n    if (stream.match(operators)) {\n      return 'operator';\n    }\n\n\n    // Handle Strings\n    if (stream.match(stringPrefixes)) {\n      state.tokenize = tokenStringFactory(stream.current());\n      return state.tokenize(stream, state);\n    }\n\n    if (stream.match(macro)) {\n      return 'meta';\n    }\n\n\n    if (stream.match(delimiters)) {\n      return null;\n    }\n\n    if (stream.match(keywords)) {\n      return 'keyword';\n    }\n\n    if (stream.match(builtins)) {\n      return 'builtin';\n    }\n\n\n    if (stream.match(identifiers)) {\n      state.leaving_expr=true;\n      return 'variable';\n    }\n    // Handle non-detected items\n    stream.next();\n    return ERRORCLASS;\n  }\n\n  function tokenStringFactory(delimiter) {\n    while ('rub'.indexOf(delimiter.charAt(0).toLowerCase()) >= 0) {\n      delimiter = delimiter.substr(1);\n    }\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = 'string';\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\\\]/);\n        if (stream.eat('\\\\')) {\n            stream.next();\n            if (singleline && stream.eol()) {\n              return OUTCLASS;\n            }\n        } else if (stream.match(delimiter)) {\n            state.tokenize = tokenBase;\n            return OUTCLASS;\n        } else {\n            stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) {\n            return ERRORCLASS;\n        } else {\n            state.tokenize = tokenBase;\n        }\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function tokenLexer(stream, state) {\n    indentInfo = null;\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    // Handle '.' connected identifiers\n    if (current === '.') {\n      style = stream.match(identifiers, false) ? null : ERRORCLASS;\n      if (style === null && state.lastStyle === 'meta') {\n          // Apply 'meta' style to '.' connected identifiers when\n          // appropriate.\n        style = 'meta';\n      }\n      return style;\n    }\n\n    return style;\n  }\n\n  var external = {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: [],\n        leaving_expr: false\n      };\n    },\n\n    token: function(stream, state) {\n      var style = tokenLexer(stream, state);\n      state.lastStyle = style;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var delta = 0;\n      if(textAfter==\"end\" || textAfter==\"]\" || textAfter==\"}\" || textAfter==\"else\" || textAfter==\"elseif\" || textAfter==\"catch\" || textAfter==\"finally\") {\n        delta = -1;\n      }\n      return (state.scopes.length + delta) * 4;\n    },\n\n    lineComment: \"#\",\n    fold: \"indent\",\n    electricChars: \"edlsifyh]}\"\n  };\n  return external;\n});\n\n\nCodeMirror.defineMIME(\"text/x-julia\", \"julia\");\n\n});\n"]}