{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/sass/sass.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","tokenRegexp","words","RegExp","join","keywords","keywordsRegexp","operators","opRegexp","pseudoElementsRegexp","urlTokens","stream","state","ch","peek","next","tokenizer","tokenBase","eatSpace","buildStringTokenizer","comment","indentation","multiLine","sol","skipTo","skipToEnd","quote","greedy","stringTokenizer","nextChar","peekChar","previousChar","string","charAt","pos","endingString","buildInterpolationTokenizer","currentTokenizer","indent","indentCount","lastScopeOffset","scopes","offset","currentOffset","indentUnit","unshift","dedent","length","shift","match","cursorHalf","eatWhile","tokenLexer","style","current","startOfToken","withCurrentIndent","newScopes","i","scope","push","startState","type","definedVars","definedMixins","token","lastToken","content","defineMIME"],"mappings":"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","file":"sass.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sass\", function(config) {\n  function tokenRegexp(words) {\n    return new RegExp(\"^\" + words.join(\"|\"));\n  }\n\n  var keywords = [\"true\", \"false\", \"null\", \"auto\"];\n  var keywordsRegexp = new RegExp(\"^\" + keywords.join(\"|\"));\n\n  var operators = [\"\\\\(\", \"\\\\)\", \"=\", \">\", \"<\", \"==\", \">=\", \"<=\", \"\\\\+\", \"-\",\n                   \"\\\\!=\", \"/\", \"\\\\*\", \"%\", \"and\", \"or\", \"not\", \";\",\"\\\\{\",\"\\\\}\",\":\"];\n  var opRegexp = tokenRegexp(operators);\n\n  var pseudoElementsRegexp = /^::?[a-zA-Z_][\\w\\-]*/;\n\n  function urlTokens(stream, state) {\n    var ch = stream.peek();\n\n    if (ch === \")\") {\n      stream.next();\n      state.tokenizer = tokenBase;\n      return \"operator\";\n    } else if (ch === \"(\") {\n      stream.next();\n      stream.eatSpace();\n\n      return \"operator\";\n    } else if (ch === \"'\" || ch === '\"') {\n      state.tokenizer = buildStringTokenizer(stream.next());\n      return \"string\";\n    } else {\n      state.tokenizer = buildStringTokenizer(\")\", false);\n      return \"string\";\n    }\n  }\n  function comment(indentation, multiLine) {\n    return function(stream, state) {\n      if (stream.sol() && stream.indentation() <= indentation) {\n        state.tokenizer = tokenBase;\n        return tokenBase(stream, state);\n      }\n\n      if (multiLine && stream.skipTo(\"*/\")) {\n        stream.next();\n        stream.next();\n        state.tokenizer = tokenBase;\n      } else {\n        stream.skipToEnd();\n      }\n\n      return \"comment\";\n    };\n  }\n\n  function buildStringTokenizer(quote, greedy) {\n    if (greedy == null) { greedy = true; }\n\n    function stringTokenizer(stream, state) {\n      var nextChar = stream.next();\n      var peekChar = stream.peek();\n      var previousChar = stream.string.charAt(stream.pos-2);\n\n      var endingString = ((nextChar !== \"\\\\\" && peekChar === quote) || (nextChar === quote && previousChar !== \"\\\\\"));\n\n      if (endingString) {\n        if (nextChar !== quote && greedy) { stream.next(); }\n        state.tokenizer = tokenBase;\n        return \"string\";\n      } else if (nextChar === \"#\" && peekChar === \"{\") {\n        state.tokenizer = buildInterpolationTokenizer(stringTokenizer);\n        stream.next();\n        return \"operator\";\n      } else {\n        return \"string\";\n      }\n    }\n\n    return stringTokenizer;\n  }\n\n  function buildInterpolationTokenizer(currentTokenizer) {\n    return function(stream, state) {\n      if (stream.peek() === \"}\") {\n        stream.next();\n        state.tokenizer = currentTokenizer;\n        return \"operator\";\n      } else {\n        return tokenBase(stream, state);\n      }\n    };\n  }\n\n  function indent(state) {\n    if (state.indentCount == 0) {\n      state.indentCount++;\n      var lastScopeOffset = state.scopes[0].offset;\n      var currentOffset = lastScopeOffset + config.indentUnit;\n      state.scopes.unshift({ offset:currentOffset });\n    }\n  }\n\n  function dedent(state) {\n    if (state.scopes.length == 1) return;\n\n    state.scopes.shift();\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.peek();\n\n    // Comment\n    if (stream.match(\"/*\")) {\n      state.tokenizer = comment(stream.indentation(), true);\n      return state.tokenizer(stream, state);\n    }\n    if (stream.match(\"//\")) {\n      state.tokenizer = comment(stream.indentation(), false);\n      return state.tokenizer(stream, state);\n    }\n\n    // Interpolation\n    if (stream.match(\"#{\")) {\n      state.tokenizer = buildInterpolationTokenizer(tokenBase);\n      return \"operator\";\n    }\n\n    // Strings\n    if (ch === '\"' || ch === \"'\") {\n      stream.next();\n      state.tokenizer = buildStringTokenizer(ch);\n      return \"string\";\n    }\n\n    if(!state.cursorHalf){// state.cursorHalf === 0\n    // first half i.e. before : for key-value pairs\n    // including selectors\n\n      if (ch === \".\") {\n        stream.next();\n        if (stream.match(/^[\\w-]+/)) {\n          indent(state);\n          return \"atom\";\n        } else if (stream.peek() === \"#\") {\n          indent(state);\n          return \"atom\";\n        }\n      }\n\n      if (ch === \"#\") {\n        stream.next();\n        // ID selectors\n        if (stream.match(/^[\\w-]+/)) {\n          indent(state);\n          return \"atom\";\n        }\n        if (stream.peek() === \"#\") {\n          indent(state);\n          return \"atom\";\n        }\n      }\n\n      // Variables\n      if (ch === \"$\") {\n        stream.next();\n        stream.eatWhile(/[\\w-]/);\n        return \"variable-2\";\n      }\n\n      // Numbers\n      if (stream.match(/^-?[0-9\\.]+/))\n        return \"number\";\n\n      // Units\n      if (stream.match(/^(px|em|in)\\b/))\n        return \"unit\";\n\n      if (stream.match(keywordsRegexp))\n        return \"keyword\";\n\n      if (stream.match(/^url/) && stream.peek() === \"(\") {\n        state.tokenizer = urlTokens;\n        return \"atom\";\n      }\n\n      if (ch === \"=\") {\n        // Match shortcut mixin definition\n        if (stream.match(/^=[\\w-]+/)) {\n          indent(state);\n          return \"meta\";\n        }\n      }\n\n      if (ch === \"+\") {\n        // Match shortcut mixin definition\n        if (stream.match(/^\\+[\\w-]+/)){\n          return \"variable-3\";\n        }\n      }\n\n      if(ch === \"@\"){\n        if(stream.match(/@extend/)){\n          if(!stream.match(/\\s*[\\w]/))\n            dedent(state);\n        }\n      }\n\n\n      // Indent Directives\n      if (stream.match(/^@(else if|if|media|else|for|each|while|mixin|function)/)) {\n        indent(state);\n        return \"meta\";\n      }\n\n      // Other Directives\n      if (ch === \"@\") {\n        stream.next();\n        stream.eatWhile(/[\\w-]/);\n        return \"meta\";\n      }\n\n      if (stream.eatWhile(/[\\w-]/)){\n        if(stream.match(/ *: *[\\w-\\+\\$#!\\(\"']/,false)){\n          return \"propery\";\n        }\n        else if(stream.match(/ *:/,false)){\n          indent(state);\n          state.cursorHalf = 1;\n          return \"atom\";\n        }\n        else if(stream.match(/ *,/,false)){\n          return \"atom\";\n        }\n        else{\n          indent(state);\n          return \"atom\";\n        }\n      }\n\n      if(ch === \":\"){\n        if (stream.match(pseudoElementsRegexp)){ // could be a pseudo-element\n          return \"keyword\";\n        }\n        stream.next();\n        state.cursorHalf=1;\n        return \"operator\";\n      }\n\n    } // cursorHalf===0 ends here\n    else{\n\n      if (ch === \"#\") {\n        stream.next();\n        // Hex numbers\n        if (stream.match(/[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/)){\n          if(!stream.peek()){\n            state.cursorHalf = 0;\n          }\n          return \"number\";\n        }\n      }\n\n      // Numbers\n      if (stream.match(/^-?[0-9\\.]+/)){\n        if(!stream.peek()){\n          state.cursorHalf = 0;\n        }\n        return \"number\";\n      }\n\n      // Units\n      if (stream.match(/^(px|em|in)\\b/)){\n        if(!stream.peek()){\n          state.cursorHalf = 0;\n        }\n        return \"unit\";\n      }\n\n      if (stream.match(keywordsRegexp)){\n        if(!stream.peek()){\n          state.cursorHalf = 0;\n        }\n        return \"keyword\";\n      }\n\n      if (stream.match(/^url/) && stream.peek() === \"(\") {\n        state.tokenizer = urlTokens;\n        if(!stream.peek()){\n          state.cursorHalf = 0;\n        }\n        return \"atom\";\n      }\n\n      // Variables\n      if (ch === \"$\") {\n        stream.next();\n        stream.eatWhile(/[\\w-]/);\n        if(!stream.peek()){\n          state.cursorHalf = 0;\n        }\n        return \"variable-3\";\n      }\n\n      // bang character for !important, !default, etc.\n      if (ch === \"!\") {\n        stream.next();\n        if(!stream.peek()){\n          state.cursorHalf = 0;\n        }\n        return stream.match(/^[\\w]+/) ? \"keyword\": \"operator\";\n      }\n\n      if (stream.match(opRegexp)){\n        if(!stream.peek()){\n          state.cursorHalf = 0;\n        }\n        return \"operator\";\n      }\n\n      // attributes\n      if (stream.eatWhile(/[\\w-]/)) {\n        if(!stream.peek()){\n          state.cursorHalf = 0;\n        }\n        return \"attribute\";\n      }\n\n      //stream.eatSpace();\n      if(!stream.peek()){\n        state.cursorHalf = 0;\n        return null;\n      }\n\n    } // else ends here\n\n    if (stream.match(opRegexp))\n      return \"operator\";\n\n    // If we haven't returned by now, we move 1 character\n    // and return an error\n    stream.next();\n    return null;\n  }\n\n  function tokenLexer(stream, state) {\n    if (stream.sol()) state.indentCount = 0;\n    var style = state.tokenizer(stream, state);\n    var current = stream.current();\n\n    if (current === \"@return\" || current === \"}\"){\n      dedent(state);\n    }\n\n    if (style !== null) {\n      var startOfToken = stream.pos - current.length;\n\n      var withCurrentIndent = startOfToken + (config.indentUnit * state.indentCount);\n\n      var newScopes = [];\n\n      for (var i = 0; i < state.scopes.length; i++) {\n        var scope = state.scopes[i];\n\n        if (scope.offset <= withCurrentIndent)\n          newScopes.push(scope);\n      }\n\n      state.scopes = newScopes;\n    }\n\n\n    return style;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenizer: tokenBase,\n        scopes: [{offset: 0, type: \"sass\"}],\n        indentCount: 0,\n        cursorHalf: 0,  // cursor half tells us if cursor lies after (1)\n                        // or before (0) colon (well... more or less)\n        definedVars: [],\n        definedMixins: []\n      };\n    },\n    token: function(stream, state) {\n      var style = tokenLexer(stream, state);\n\n      state.lastToken = { style: style, content: stream.current() };\n\n      return style;\n    },\n\n    indent: function(state) {\n      return state.scopes[0].offset;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-sass\", \"sass\");\n\n});\n"]}