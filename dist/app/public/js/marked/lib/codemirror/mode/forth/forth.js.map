{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/forth/forth.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","toWordList","words","ret","split","forEach","e","push","name","coreWordList","immediateWordList","defineMode","searchWordList","wordList","word","i","length","toUpperCase","undefined","startState","state","base","token","stream","stt","mat","eatSpace","match","backUp","skipToEnd","eatWhile","s","eat","defineMIME"],"mappings":"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","file":"forth.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Author: Aliaksei Chapyzhenka\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function toWordList(words) {\n    var ret = [];\n    words.split(' ').forEach(function(e){\n      ret.push({name: e});\n    });\n    return ret;\n  }\n\n  var coreWordList = toWordList(\n'INVERT AND OR XOR\\\n 2* 2/ LSHIFT RSHIFT\\\n 0= = 0< < > U< MIN MAX\\\n 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\\\n >R R> R@\\\n + - 1+ 1- ABS NEGATE\\\n S>D * M* UM*\\\n FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\\\n HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\\\n ALIGN ALIGNED +! ALLOT\\\n CHAR [CHAR] [ ] BL\\\n FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\\\n ; DOES> >BODY\\\n EVALUATE\\\n SOURCE >IN\\\n <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\\\n FILL MOVE\\\n . CR EMIT SPACE SPACES TYPE U. .R U.R\\\n ACCEPT\\\n TRUE FALSE\\\n <> U> 0<> 0>\\\n NIP TUCK ROLL PICK\\\n 2>R 2R@ 2R>\\\n WITHIN UNUSED MARKER\\\n I J\\\n TO\\\n COMPILE, [COMPILE]\\\n SAVE-INPUT RESTORE-INPUT\\\n PAD ERASE\\\n 2LITERAL DNEGATE\\\n D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\\\n M+ M*/ D. D.R 2ROT DU<\\\n CATCH THROW\\\n FREE RESIZE ALLOCATE\\\n CS-PICK CS-ROLL\\\n GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\\\n PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\\\n -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');\n\n  var immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');\n\n  CodeMirror.defineMode('forth', function() {\n    function searchWordList (wordList, word) {\n      var i;\n      for (i = wordList.length - 1; i >= 0; i--) {\n        if (wordList[i].name === word.toUpperCase()) {\n          return wordList[i];\n        }\n      }\n      return undefined;\n    }\n  return {\n    startState: function() {\n      return {\n        state: '',\n        base: 10,\n        coreWordList: coreWordList,\n        immediateWordList: immediateWordList,\n        wordList: []\n      };\n    },\n    token: function (stream, stt) {\n      var mat;\n      if (stream.eatSpace()) {\n        return null;\n      }\n      if (stt.state === '') { // interpretation\n        if (stream.match(/^(\\]|:NONAME)(\\s|$)/i)) {\n          stt.state = ' compilation';\n          return 'builtin compilation';\n        }\n        mat = stream.match(/^(\\:)\\s+(\\S+)(\\s|$)+/);\n        if (mat) {\n          stt.wordList.push({name: mat[2].toUpperCase()});\n          stt.state = ' compilation';\n          return 'def' + stt.state;\n        }\n        mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\\s+(\\S+)(\\s|$)+/i);\n        if (mat) {\n          stt.wordList.push({name: mat[2].toUpperCase()});\n          return 'def' + stt.state;\n        }\n        mat = stream.match(/^(\\'|\\[\\'\\])\\s+(\\S+)(\\s|$)+/);\n        if (mat) {\n          return 'builtin' + stt.state;\n        }\n        } else { // compilation\n        // ; [\n        if (stream.match(/^(\\;|\\[)(\\s)/)) {\n          stt.state = '';\n          stream.backUp(1);\n          return 'builtin compilation';\n        }\n        if (stream.match(/^(\\;|\\[)($)/)) {\n          stt.state = '';\n          return 'builtin compilation';\n        }\n        if (stream.match(/^(POSTPONE)\\s+\\S+(\\s|$)+/)) {\n          return 'builtin';\n        }\n      }\n\n      // dynamic wordlist\n      mat = stream.match(/^(\\S+)(\\s+|$)/);\n      if (mat) {\n        if (searchWordList(stt.wordList, mat[1]) !== undefined) {\n          return 'variable' + stt.state;\n        }\n\n        // comments\n        if (mat[1] === '\\\\') {\n          stream.skipToEnd();\n            return 'comment' + stt.state;\n          }\n\n          // core words\n          if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {\n            return 'builtin' + stt.state;\n          }\n          if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {\n            return 'keyword' + stt.state;\n          }\n\n          if (mat[1] === '(') {\n            stream.eatWhile(function (s) { return s !== ')'; });\n            stream.eat(')');\n            return 'comment' + stt.state;\n          }\n\n          // // strings\n          if (mat[1] === '.(') {\n            stream.eatWhile(function (s) { return s !== ')'; });\n            stream.eat(')');\n            return 'string' + stt.state;\n          }\n          if (mat[1] === 'S\"' || mat[1] === '.\"' || mat[1] === 'C\"') {\n            stream.eatWhile(function (s) { return s !== '\"'; });\n            stream.eat('\"');\n            return 'string' + stt.state;\n          }\n\n          // numbers\n          if (mat[1] - 0xfffffffff) {\n            return 'number' + stt.state;\n          }\n          // if (mat[1].match(/^[-+]?[0-9]+\\.[0-9]*/)) {\n          //     return 'number' + stt.state;\n          // }\n\n          return 'atom' + stt.state;\n        }\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-forth\", \"forth\");\n});\n"]}