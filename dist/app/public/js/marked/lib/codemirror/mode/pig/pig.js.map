{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/pig/pig.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","_config","parserConfig","keywords","builtins","types","multiLineStrings","isOperatorChar","chain","stream","state","f","tokenize","type","ret","tp","style","tokenComment","isEnd","ch","next","tokenBase","tokenString","quote","escaped","end","test","eatWhile","eat","skipToEnd","propertyIsEnumerable","current","toUpperCase","startState","startOfLine","token","eatSpace","str","obj","words","split","i","length","pBuiltins","pKeywords","pTypes","defineMIME","name","registerHelper"],"mappings":"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","file":"pig.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/*\n *      Pig Latin Mode for CodeMirror 2\n *      @author Prasanth Jayachandran\n *      @link   https://github.com/prasanthj/pig-codemirror-2\n *  This implementation is adapted from PL/SQL mode in CodeMirror 2.\n */\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pig\", function(_config, parserConfig) {\n  var keywords = parserConfig.keywords,\n  builtins = parserConfig.builtins,\n  types = parserConfig.types,\n  multiLineStrings = parserConfig.multiLineStrings;\n\n  var isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  var type;\n  function ret(tp, style) {\n    type = tp;\n    return style;\n  }\n\n  function tokenComment(stream, state) {\n    var isEnd = false;\n    var ch;\n    while(ch = stream.next()) {\n      if(ch == \"/\" && isEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      isEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true; break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return ret(\"string\", \"error\");\n    };\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    // is a start of string?\n    if (ch == '\"' || ch == \"'\")\n      return chain(stream, state, tokenString(ch));\n    // is it one of the special chars\n    else if(/[\\[\\]{}\\(\\),;\\.]/.test(ch))\n      return ret(ch);\n    // is it a number?\n    else if(/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return ret(\"number\", \"number\");\n    }\n    // multi line comment or operator\n    else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return ret(\"operator\", \"operator\");\n      }\n    }\n    // single line comment or operator\n    else if (ch==\"-\") {\n      if(stream.eat(\"-\")){\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return ret(\"operator\", \"operator\");\n      }\n    }\n    // is it an operator\n    else if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return ret(\"operator\", \"operator\");\n    }\n    else {\n      // get the while word\n      stream.eatWhile(/[\\w\\$_]/);\n      // is it one of the listed keywords?\n      if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n        if (stream.eat(\")\") || stream.eat(\".\")) {\n          //keywords can be used as variables like flatten(group), group.$0 etc..\n        }\n        else {\n          return (\"keyword\", \"keyword\");\n        }\n      }\n      // is it one of the builtin functions?\n      if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))\n      {\n        return (\"keyword\", \"variable-2\");\n      }\n      // is it one of the listed types?\n      if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))\n        return (\"keyword\", \"variable-3\");\n      // default is a 'variable'\n      return ret(\"variable\", \"pig-word\");\n    }\n  }\n\n  // Interface\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      if(stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    }\n  };\n});\n\n(function() {\n  function keywords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  // builtin funcs taken from trunk revision 1303237\n  var pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \"\n    + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \"\n    + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \"\n    + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \"\n    + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \"\n    + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \"\n    + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \"\n    + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \"\n    + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \"\n    + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \";\n\n  // taken from QueryLexer.g\n  var pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \"\n    + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \"\n    + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \"\n    + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \"\n    + \"NEQ MATCHES TRUE FALSE DUMP\";\n\n  // data types\n  var pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\n\n  CodeMirror.defineMIME(\"text/x-pig\", {\n    name: \"pig\",\n    builtins: keywords(pBuiltins),\n    keywords: keywords(pKeywords),\n    types: keywords(pTypes)\n  });\n\n  CodeMirror.registerHelper(\"hintWords\", \"pig\", (pBuiltins + pTypes + pKeywords).split(\" \"));\n}());\n\n});\n"]}