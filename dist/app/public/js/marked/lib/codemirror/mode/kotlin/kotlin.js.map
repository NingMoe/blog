{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/kotlin/kotlin.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","words","str","obj","split","i","length","multiLineStrings","keywords","softKeywords","blockKeywords","atoms","curPunc","tokenBase","stream","state","ch","next","startString","eat","test","eatWhile","tokenize","push","tokenComment","skipToEnd","expectExpression","lastToken","cur","current","propertyIsEnumerable","isBase","quote","tripleQuoted","t","escaped","end","match","tokenBaseUntilBrace","tokenBaseUntilSpace","pop","depth","peek","isWord","maybeEnd","last","Context","indented","column","type","align","prev","pushContext","col","context","popContext","startState","basecolumn","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","firstChar","charAt","closing","electricChars","defineMIME"],"mappings":"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","file":"kotlin.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"kotlin\", function (config, parserConfig) {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var multiLineStrings = parserConfig.multiLineStrings;\n\n  var keywords = words(\n          \"package continue return object while break class data trait throw super\" +\n          \" when type this else This try val var fun for is in if do as true false null get set\");\n  var softKeywords = words(\"import\" +\n      \" where by get set abstract enum open annotation override private public internal\" +\n      \" protected catch out vararg inline finally final ref\");\n  var blockKeywords = words(\"catch class do else finally for if where try while enum\");\n  var atoms = words(\"null true false this\");\n\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      return startString(ch, stream, state);\n    }\n    // Wildcard import w/o trailing semicolon (import smth.*)\n    if (ch == \".\" && stream.eat(\"*\")) {\n      return \"word\";\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      if (stream.eat(/eE/)) {\n        stream.eat(/\\+\\-/);\n        stream.eatWhile(/\\d/);\n      }\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize.push(tokenComment);\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (expectExpression(state.lastToken)) {\n        return startString(ch, stream, state);\n      }\n    }\n    // Commented\n    if (ch == \"-\" && stream.eat(\">\")) {\n      curPunc = \"->\";\n      return null;\n    }\n    if (/[\\-+*&%=<>!?|\\/~]/.test(ch)) {\n      stream.eatWhile(/[\\-+*&%=<>|~]/);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n\n    var cur = stream.current();\n    if (atoms.propertyIsEnumerable(cur)) {\n      return \"atom\";\n    }\n    if (softKeywords.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"softKeyword\";\n    }\n\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"keyword\";\n    }\n    return \"word\";\n  }\n\n  tokenBase.isBase = true;\n\n  function startString(quote, stream, state) {\n    var tripleQuoted = false;\n    if (quote != \"/\" && stream.eat(quote)) {\n      if (stream.eat(quote)) tripleQuoted = true;\n      else return \"string\";\n    }\n    function t(stream, state) {\n      var escaped = false, next, end = !tripleQuoted;\n\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          if (!tripleQuoted) {\n            break;\n          }\n          if (stream.match(quote + quote)) {\n            end = true;\n            break;\n          }\n        }\n\n        if (quote == '\"' && next == \"$\" && !escaped && stream.eat(\"{\")) {\n          state.tokenize.push(tokenBaseUntilBrace());\n          return \"string\";\n        }\n\n        if (next == \"$\" && !escaped && !stream.eat(\" \")) {\n          state.tokenize.push(tokenBaseUntilSpace());\n          return \"string\";\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (multiLineStrings)\n        state.tokenize.push(t);\n      if (end) state.tokenize.pop();\n      return \"string\";\n    }\n\n    state.tokenize.push(t);\n    return t(stream, state);\n  }\n\n  function tokenBaseUntilBrace() {\n    var depth = 1;\n\n    function t(stream, state) {\n      if (stream.peek() == \"}\") {\n        depth--;\n        if (depth == 0) {\n          state.tokenize.pop();\n          return state.tokenize[state.tokenize.length - 1](stream, state);\n        }\n      } else if (stream.peek() == \"{\") {\n        depth++;\n      }\n      return tokenBase(stream, state);\n    }\n\n    t.isBase = true;\n    return t;\n  }\n\n  function tokenBaseUntilSpace() {\n    function t(stream, state) {\n      if (stream.eat(/[\\w]/)) {\n        var isWord = stream.eatWhile(/[\\w]/);\n        if (isWord) {\n          state.tokenize.pop();\n          return \"word\";\n        }\n      }\n      state.tokenize.pop();\n      return \"string\";\n    }\n\n    t.isBase = true;\n    return t;\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize.pop();\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function expectExpression(last) {\n    return !last || last == \"operator\" || last == \"->\" || /[\\.\\[\\{\\(,;:]/.test(last) ||\n        last == \"newstatement\" || last == \"keyword\" || last == \"proplabel\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function (basecolumn) {\n      return {\n        tokenize: [tokenBase],\n        context: new Context((basecolumn || 0) - config.indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true,\n        lastToken: null\n      };\n    },\n\n    token: function (stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n        // Automatic semicolon insertion\n        if (ctx.type == \"statement\" && !expectExpression(state.lastToken)) {\n          popContext(state);\n          ctx = state.context;\n        }\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = state.tokenize[state.tokenize.length - 1](stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n      if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\n      // Handle indentation for {x -> \\n ... }\n      else if (curPunc == \"->\" && ctx.type == \"statement\" && ctx.prev.type == \"}\") {\n        popContext(state);\n        state.context.align = false;\n      }\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (ctx.type == \"}\" || ctx.type == \"top\" || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      state.lastToken = curPunc || style;\n      return style;\n    },\n\n    indent: function (state, textAfter) {\n      if (!state.tokenize[state.tokenize.length - 1].isBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;\n      if (ctx.type == \"statement\" && !expectExpression(state.lastToken)) ctx = ctx.prev;\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") {\n        return ctx.indented + (firstChar == \"{\" ? 0 : config.indentUnit);\n      }\n      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : config.indentUnit);\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-kotlin\", \"kotlin\");\n\n});\n"]}