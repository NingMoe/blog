{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/yaml/yaml.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","cons","keywordRegex","RegExp","join","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","defineMIME"],"mappings":"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","file":"yaml.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"yaml\", function() {\n\n  var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\n  var keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\n  return {\n    token: function(stream, state) {\n      var ch = stream.peek();\n      var esc = state.escaped;\n      state.escaped = false;\n      /* comments */\n      if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n        return \"string\";\n\n      if (state.literal && stream.indentation() > state.keyCol) {\n        stream.skipToEnd(); return \"string\";\n      } else if (state.literal) { state.literal = false; }\n      if (stream.sol()) {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        /* document start */\n        if(stream.match(/---/)) { return \"def\"; }\n        /* document end */\n        if (stream.match(/\\.\\.\\./)) { return \"def\"; }\n        /* array list item */\n        if (stream.match(/\\s*-\\s+/)) { return 'meta'; }\n      }\n      /* inline pairs/lists */\n      if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n        if (ch == '{')\n          state.inlinePairs++;\n        else if (ch == '}')\n          state.inlinePairs--;\n        else if (ch == '[')\n          state.inlineList++;\n        else\n          state.inlineList--;\n        return 'meta';\n      }\n\n      /* list seperator */\n      if (state.inlineList > 0 && !esc && ch == ',') {\n        stream.next();\n        return 'meta';\n      }\n      /* pairs seperator */\n      if (state.inlinePairs > 0 && !esc && ch == ',') {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        stream.next();\n        return 'meta';\n      }\n\n      /* start of value of a pair */\n      if (state.pairStart) {\n        /* block literals */\n        if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n        /* references */\n        if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable-2'; }\n        /* numbers */\n        if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n        if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n        /* keywords */\n        if (stream.match(keywordRegex)) { return 'keyword'; }\n      }\n\n      /* pairs (associative arrays) -> key */\n      if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n        state.pair = true;\n        state.keyCol = stream.indentation();\n        return \"atom\";\n      }\n      if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n      /* nothing found, continue */\n      state.pairStart = false;\n      state.escaped = (ch == '\\\\');\n      stream.next();\n      return null;\n    },\n    startState: function() {\n      return {\n        pair: false,\n        pairStart: false,\n        keyCol: 0,\n        inlinePairs: 0,\n        inlineList: 0,\n        literal: false,\n        escaped: false\n      };\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\n\n});\n"]}