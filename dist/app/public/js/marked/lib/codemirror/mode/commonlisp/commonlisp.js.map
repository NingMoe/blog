{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/commonlisp/commonlisp.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","specialForm","assumeBody","numLiteral","symbol","type","readSym","stream","ch","next","test","backUp","current","base","state","eatSpace","match","tokenize","inString","skipToEnd","skipTo","inComment","name","charAt","lastType","escaped","last","startState","ctx","prev","start","indentTo","token","sol","style","indentUnit","column","indent","_textAfter","i","lineComment","blockCommentStart","blockCommentEnd","defineMIME"],"mappings":"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","file":"commonlisp.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"commonlisp\", function (config) {\n  var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\n  var assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\n  var numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\n  var symbol = /[^\\s'`,@()\\[\\]\";]/;\n  var type;\n\n  function readSym(stream) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"\\\\\") stream.next();\n      else if (!symbol.test(ch)) { stream.backUp(1); break; }\n    }\n    return stream.current();\n  }\n\n  function base(stream, state) {\n    if (stream.eatSpace()) {type = \"ws\"; return null;}\n    if (stream.match(numLiteral)) return \"number\";\n    var ch = stream.next();\n    if (ch == \"\\\\\") ch = stream.next();\n\n    if (ch == '\"') return (state.tokenize = inString)(stream, state);\n    else if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n    else if (ch == \")\" || ch == \"]\") { type = \"close\"; return \"bracket\"; }\n    else if (ch == \";\") { stream.skipToEnd(); type = \"ws\"; return \"comment\"; }\n    else if (/['`,@]/.test(ch)) return null;\n    else if (ch == \"|\") {\n      if (stream.skipTo(\"|\")) { stream.next(); return \"symbol\"; }\n      else { stream.skipToEnd(); return \"error\"; }\n    } else if (ch == \"#\") {\n      var ch = stream.next();\n      if (ch == \"[\") { type = \"open\"; return \"bracket\"; }\n      else if (/[+\\-=\\.']/.test(ch)) return null;\n      else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;\n      else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);\n      else if (ch == \":\") { readSym(stream); return \"meta\"; }\n      else return \"error\";\n    } else {\n      var name = readSym(stream);\n      if (name == \".\") return null;\n      type = \"symbol\";\n      if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n      if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n      if (name.charAt(0) == \"&\") return \"variable-2\";\n      return \"variable\";\n    }\n  }\n\n  function inString(stream, state) {\n    var escaped = false, next;\n    while (next = stream.next()) {\n      if (next == '\"' && !escaped) { state.tokenize = base; break; }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return \"string\";\n  }\n\n  function inComment(stream, state) {\n    var next, last;\n    while (next = stream.next()) {\n      if (next == \"#\" && last == \"|\") { state.tokenize = base; break; }\n      last = next;\n    }\n    type = \"ws\";\n    return \"comment\";\n  }\n\n  return {\n    startState: function () {\n      return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};\n    },\n\n    token: function (stream, state) {\n      if (stream.sol() && typeof state.ctx.indentTo != \"number\")\n        state.ctx.indentTo = state.ctx.start + 1;\n\n      type = null;\n      var style = state.tokenize(stream, state);\n      if (type != \"ws\") {\n        if (state.ctx.indentTo == null) {\n          if (type == \"symbol\" && assumeBody.test(stream.current()))\n            state.ctx.indentTo = state.ctx.start + config.indentUnit;\n          else\n            state.ctx.indentTo = \"next\";\n        } else if (state.ctx.indentTo == \"next\") {\n          state.ctx.indentTo = stream.column();\n        }\n        state.lastType = type;\n      }\n      if (type == \"open\") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n      else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n      return style;\n    },\n\n    indent: function (state, _textAfter) {\n      var i = state.ctx.indentTo;\n      return typeof i == \"number\" ? i : state.ctx.start + 1;\n    },\n\n    lineComment: \";;\",\n    blockCommentStart: \"#|\",\n    blockCommentEnd: \"|#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-common-lisp\", \"commonlisp\");\n\n});\n"]}