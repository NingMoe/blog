{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/dylan/dylan.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","_config","words","unnamedDefinition","namedDefinition","typeParameterizedDefinition","otherParameterizedDefinition","constantSimpleDefinition","variableSimpleDefinition","otherSimpleDefinition","statement","separator","other","signalingCalls","concat","symbolPattern","symbol","RegExp","patterns","symbolKeyword","symbolClass","symbolGlobal","symbolConstant","patternStyles","patternName","hasOwnProperty","styles","wordLookup","styleLookup","forEach","type","word","chain","stream","state","f","tokenize","content","ret","_type","style","_content","tokenBase","ch","peek","next","tokenString","eat","tokenComment","skipToEnd","skipTo","test","match","eatWhile","name","pattern","Array","some","p","current","maybeEnd","quote","end","startState","currentIndent","token","eatSpace","blockCommentStart","blockCommentEnd","defineMIME"],"mappings":";;;;AAAA;AACA;;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,QAAOC,OAAP,yCAAOA,OAAP,MAAkB,QAAlB,IAA8B,QAAOC,MAAP,yCAAOA,MAAP,MAAiB,QAAnD,EAA6D;AAC3DF,QAAIG,QAAQ,sBAAR,CAAJ,EADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,OAAOC,GAA1C,EAA+C;AAClDD,WAAO,CAAC,sBAAD,CAAP,EAAiCJ,GAAjC,EADG,KAEA;AACHA,QAAIM,UAAJ;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACxB;;AAEAA,aAAWC,UAAX,CAAsB,OAAtB,EAA+B,UAASC,OAAT,EAAkB;AAC/C;AACA,QAAIC,QAAQ;AACV;AACAC,yBAAmB,CAAC,WAAD,CAFT;;AAIV;AACAC,uBAAiB,CAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EACC,UADD,EACa,SADb,EAEC,YAFD,EAEe,oBAFf,CALP;;AAUV;AACA;AACA;AACAC,mCAA6B,CAAC,OAAD,EAAU,WAAV,EAAuB,kBAAvB,CAbnB;;AAeV;AACA;AACAC,oCAA8B,CAAC,QAAD,EAAW,UAAX,EACC,YADD,EACe,WADf,CAjBpB;;AAqBV;AACA;AACA;AACAC,gCAA0B,CAAC,UAAD,CAxBhB;;AA0BV;AACA;AACA;AACAC,gCAA0B,CAAC,UAAD,CA7BhB;;AA+BV;AACA;AACAC,6BAAuB,CAAC,SAAD,EAAY,QAAZ,EACC,gBADD,EAEC,OAFD,CAjCb;;AAsCV;AACAC,iBAAW,CAAC,IAAD,EAAO,OAAP,EAAgB,OAAhB,EAAyB,QAAzB,EAAmC,MAAnC,EACC,KADD,EACQ,QADR,EACkB,MADlB,EAC0B,QAD1B,EACoC,OADpC,EAEC,OAFD,EAEU,SAFV,EAEqB,WAFrB,EAEkC,cAFlC,CAvCD;;AA4CV;AACA;AACA;AACAC,iBAAW,CAAC,SAAD,EAAY,WAAZ,EAAyB,SAAzB,EAAoC,MAApC,EACC,QADD,EACW,YADX,CA/CD;;AAmDV;AACA;AACAC,aAAO,CAAC,OAAD,EAAU,OAAV,EAAmB,IAAnB,EAAyB,MAAzB,EAAiC,SAAjC,EAA4C,IAA5C,EACC,UADD,EACa,KADb,EACoB,OADpB,EAC6B,WAD7B,EAC0C,MAD1C,EAEC,UAFD,EAEa,MAFb,EAEqB,IAFrB,EAE2B,UAF3B,EAEuC,SAFvC,CArDG;;AA0DV;AACAC,sBAAgB,CAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,EACC,OADD,EACU,YADV,EACwB,OADxB;AA3DN,KAAZ;;AAgEAX,UAAM,iBAAN,IACEA,MAAM,mBAAN,EACCY,MADD,CACQZ,MAAM,iBAAN,CADR,EAECY,MAFD,CAEQZ,MAAM,8BAAN,CAFR,CADF;;AAKAA,UAAM,YAAN,IACEA,MAAM,6BAAN,EACCY,MADD,CACQZ,MAAM,iBAAN,CADR,CADF;;AAIAA,UAAM,yBAAN,IACEA,MAAM,6BAAN,EACCY,MADD,CACQZ,MAAM,8BAAN,CADR,CADF;;AAIAA,UAAM,kBAAN,IACEA,MAAM,0BAAN,EACCY,MADD,CACQZ,MAAM,0BAAN,CADR,EAECY,MAFD,CAEQZ,MAAM,uBAAN,CAFR,CADF;;AAKAA,UAAM,SAAN,IACEA,MAAM,WAAN,EACCY,MADD,CACQZ,MAAM,WAAN,CADR,EAECY,MAFD,CAEQZ,MAAM,OAAN,CAFR,CADF;;AAKA;AACA,QAAIa,gBAAgB,qBAApB;AACA,QAAIC,SAAS,IAAIC,MAAJ,CAAW,MAAMF,aAAjB,CAAb;AACA,QAAIG,WAAW;AACb;AACAC,qBAAeJ,gBAAgB,GAFlB;AAGbK,mBAAa,MAAML,aAAN,GAAsB,GAHtB;AAIbM,oBAAc,QAAQN,aAAR,GAAwB,KAJzB;AAKbO,sBAAgB,QAAQP;AALX,KAAf;AAOA,QAAIQ,gBAAgB;AAClBJ,qBAAe,MADG;AAElBC,mBAAa,KAFK;AAGlBC,oBAAc,YAHI;AAIlBC,sBAAgB;AAJE,KAApB;;AAOA;AACA,SAAK,IAAIE,WAAT,IAAwBN,QAAxB;AACE,UAAIA,SAASO,cAAT,CAAwBD,WAAxB,CAAJ,EACEN,SAASM,WAAT,IAAwB,IAAIP,MAAJ,CAAW,MAAMC,SAASM,WAAT,CAAjB,CAAxB;AAFJ,KA3G+C,CA+G/C;AACA;AACAN,aAAS,SAAT,IAAsB,CAAC,mCAAD,CAAtB;;AAEA,QAAIQ,SAAS,EAAb;AACAA,WAAO,SAAP,IAAoB,SAApB;AACAA,WAAO,YAAP,IAAuB,KAAvB;AACAA,WAAO,kBAAP,IAA6B,KAA7B;AACAA,WAAO,gBAAP,IAA2B,SAA3B;;AAEA;AACA,QAAIC,aAAa,EAAjB;AACA,QAAIC,cAAc,EAAlB;;AAEA,KACE,SADF,EAEE,YAFF,EAGE,kBAHF,EAIE,gBAJF,EAKEC,OALF,CAKU,UAASC,IAAT,EAAe;AACvB5B,YAAM4B,IAAN,EAAYD,OAAZ,CAAoB,UAASE,IAAT,EAAe;AACjCJ,mBAAWI,IAAX,IAAmBD,IAAnB;AACAF,oBAAYG,IAAZ,IAAoBL,OAAOI,IAAP,CAApB;AACD,OAHD;AAID,KAVD;;AAaA,aAASE,KAAT,CAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,CAA9B,EAAiC;AAC/BD,YAAME,QAAN,GAAiBD,CAAjB;AACA,aAAOA,EAAEF,MAAF,EAAUC,KAAV,CAAP;AACD;;AAED,QAAIJ,IAAJ,EAAUO,OAAV;;AAEA,aAASC,GAAT,CAAaC,KAAb,EAAoBC,KAApB,EAA2BC,QAA3B,EAAqC;AACnCX,aAAOS,KAAP;AACAF,gBAAUI,QAAV;AACA,aAAOD,KAAP;AACD;;AAED,aAASE,SAAT,CAAmBT,MAAnB,EAA2BC,KAA3B,EAAkC;AAChC;AACA,UAAIS,KAAKV,OAAOW,IAAP,EAAT;AACA,UAAID,MAAM,GAAN,IAAaA,MAAM,GAAvB,EAA4B;AAC1BV,eAAOY,IAAP;AACA,eAAOb,MAAMC,MAAN,EAAcC,KAAd,EAAqBY,YAAYH,EAAZ,EAAgB,QAAhB,EAA0B,QAA1B,CAArB,CAAP;AACD;AACD;AAJA,WAKK,IAAIA,MAAM,GAAV,EAAe;AAClBV,iBAAOY,IAAP;AACA,cAAIZ,OAAOc,GAAP,CAAW,GAAX,CAAJ,EAAqB;AACnB,mBAAOf,MAAMC,MAAN,EAAcC,KAAd,EAAqBc,YAArB,CAAP;AACD,WAFD,MAEO,IAAIf,OAAOc,GAAP,CAAW,GAAX,CAAJ,EAAqB;AAC1Bd,mBAAOgB,SAAP;AACA,mBAAOX,IAAI,SAAJ,EAAe,SAAf,CAAP;AACD,WAHM,MAGA;AACLL,mBAAOiB,MAAP,CAAc,GAAd;AACA,mBAAOZ,IAAI,UAAJ,EAAgB,UAAhB,CAAP;AACD;AACF;AACD;AAZK,aAaA,IAAI,KAAKa,IAAL,CAAUR,EAAV,CAAJ,EAAmB;AACtBV,mBAAOmB,KAAP,CAAa,+BAAb;AACA,mBAAOd,IAAI,QAAJ,EAAc,QAAd,CAAP;AACD;AACD;AAJK,eAKA,IAAIK,MAAM,GAAV,EAAe;AAClBV,qBAAOY,IAAP;AACA;AACAF,mBAAKV,OAAOW,IAAP,EAAL;AACA,kBAAID,MAAM,GAAV,EAAe;AACbV,uBAAOY,IAAP;AACA,uBAAOb,MAAMC,MAAN,EAAcC,KAAd,EAAqBY,YAAY,GAAZ,EAAiB,QAAjB,EAA2B,UAA3B,CAArB,CAAP;AACD;AACD;AAJA,mBAKK,IAAIH,MAAM,GAAV,EAAe;AAClBV,yBAAOY,IAAP;AACAZ,yBAAOoB,QAAP,CAAgB,MAAhB;AACA,yBAAOf,IAAI,QAAJ,EAAc,QAAd,CAAP;AACD;AACD;AALK,qBAMA,IAAIK,MAAM,GAAV,EAAe;AAClBV,2BAAOY,IAAP;AACAZ,2BAAOoB,QAAP,CAAgB,UAAhB;AACA,2BAAOf,IAAI,QAAJ,EAAc,QAAd,CAAP;AACD;AACD;AALK,uBAMA,IAAIK,MAAM,GAAV,EAAe;AAClBV,6BAAOY,IAAP;AACAZ,6BAAOoB,QAAP,CAAgB,OAAhB;AACA,6BAAOf,IAAI,QAAJ,EAAc,QAAd,CAAP;AACD;AACD;AALK,yBAMA;AACHL,+BAAOoB,QAAP,CAAgB,WAAhB;AACA,+BAAOf,IAAI,MAAJ,EAAY,SAAZ,CAAP;AACD;AACF,aA/BI,MA+BE,IAAIL,OAAOmB,KAAP,CAAa,KAAb,CAAJ,EAAyB;AAC9B,qBAAOd,IAAI,KAAJ,EAAW,SAAX,CAAP;AACD;AACD,WAAK,IAAIgB,IAAT,IAAiBpC,QAAjB,EAA2B;AACzB,YAAIA,SAASO,cAAT,CAAwB6B,IAAxB,CAAJ,EAAmC;AACjC,cAAIC,UAAUrC,SAASoC,IAAT,CAAd;AACA,cAAKC,mBAAmBC,KAAnB,IAA4BD,QAAQE,IAAR,CAAa,UAASC,CAAT,EAAY;AACxD,mBAAOzB,OAAOmB,KAAP,CAAaM,CAAb,CAAP;AACD,WAFgC,CAA7B,IAEGzB,OAAOmB,KAAP,CAAaG,OAAb,CAFP,EAGE,OAAOjB,IAAIgB,IAAJ,EAAU/B,cAAc+B,IAAd,CAAV,EAA+BrB,OAAO0B,OAAP,EAA/B,CAAP;AACH;AACF;AACD,UAAI1B,OAAOmB,KAAP,CAAa,QAAb,CAAJ,EAA4B;AAC1B,eAAOd,IAAI,YAAJ,EAAkB,KAAlB,CAAP;AACD,OAFD,MAEO;AACLL,eAAOoB,QAAP,CAAgB,QAAhB;AACA;AACA,YAAI1B,WAAWM,OAAO0B,OAAP,EAAX,CAAJ,EAAkC;AAChC,iBAAOrB,IAAIX,WAAWM,OAAO0B,OAAP,EAAX,CAAJ,EAAkC/B,YAAYK,OAAO0B,OAAP,EAAZ,CAAlC,EAAiE1B,OAAO0B,OAAP,EAAjE,CAAP;AACD,SAFD,MAEO,IAAI1B,OAAO0B,OAAP,GAAiBP,KAAjB,CAAuBpC,MAAvB,CAAJ,EAAoC;AACzC,iBAAOsB,IAAI,UAAJ,EAAgB,UAAhB,CAAP;AACD,SAFM,MAEA;AACLL,iBAAOY,IAAP;AACA,iBAAOP,IAAI,OAAJ,EAAa,YAAb,CAAP;AACD;AACF;AACF;;AAED,aAASU,YAAT,CAAsBf,MAAtB,EAA8BC,KAA9B,EAAqC;AACnC,UAAI0B,WAAW,KAAf;AAAA,UACAjB,EADA;AAEA,aAAQA,KAAKV,OAAOY,IAAP,EAAb,EAA6B;AAC3B,YAAIF,MAAM,GAAN,IAAaiB,QAAjB,EAA2B;AACzB1B,gBAAME,QAAN,GAAiBM,SAAjB;AACA;AACD;AACDkB,mBAAYjB,MAAM,GAAlB;AACD;AACD,aAAOL,IAAI,SAAJ,EAAe,SAAf,CAAP;AACD;;AAED,aAASQ,WAAT,CAAqBe,KAArB,EAA4B/B,IAA5B,EAAkCU,KAAlC,EAAyC;AACvC,aAAO,UAASP,MAAT,EAAiBC,KAAjB,EAAwB;AAC7B,YAAIW,IAAJ;AAAA,YAAUiB,MAAM,KAAhB;AACA,eAAO,CAACjB,OAAOZ,OAAOY,IAAP,EAAR,KAA0B,IAAjC,EAAuC;AACrC,cAAIA,QAAQgB,KAAZ,EAAmB;AACjBC,kBAAM,IAAN;AACA;AACD;AACF;AACD,YAAIA,GAAJ,EACE5B,MAAME,QAAN,GAAiBM,SAAjB;AACF,eAAOJ,IAAIR,IAAJ,EAAUU,KAAV,CAAP;AACD,OAXD;AAYD;;AAED;AACA,WAAO;AACLuB,kBAAY,sBAAW;AACrB,eAAO;AACL3B,oBAAUM,SADL;AAELsB,yBAAe;AAFV,SAAP;AAID,OANI;AAOLC,aAAO,eAAShC,MAAT,EAAiBC,KAAjB,EAAwB;AAC7B,YAAID,OAAOiC,QAAP,EAAJ,EACE,OAAO,IAAP;AACF,YAAI1B,QAAQN,MAAME,QAAN,CAAeH,MAAf,EAAuBC,KAAvB,CAAZ;AACA,eAAOM,KAAP;AACD,OAZI;AAaL2B,yBAAmB,IAbd;AAcLC,uBAAiB;AAdZ,KAAP;AAgBD,GAzRD;;AA2RArE,aAAWsE,UAAX,CAAsB,cAAtB,EAAsC,OAAtC;AAEC,CAvSD","file":"dylan.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"dylan\", function(_config) {\n  // Words\n  var words = {\n    // Words that introduce unnamed definitions like \"define interface\"\n    unnamedDefinition: [\"interface\"],\n\n    // Words that introduce simple named definitions like \"define library\"\n    namedDefinition: [\"module\", \"library\", \"macro\",\n                      \"C-struct\", \"C-union\",\n                      \"C-function\", \"C-callable-wrapper\"\n                     ],\n\n    // Words that introduce type definitions like \"define class\".\n    // These are also parameterized like \"define method\" and are\n    // appended to otherParameterizedDefinitionWords\n    typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n\n    // Words that introduce trickier definitions like \"define method\".\n    // These require special definitions to be added to startExpressions\n    otherParameterizedDefinition: [\"method\", \"function\",\n                                   \"C-variable\", \"C-address\"\n                                  ],\n\n    // Words that introduce module constant definitions.\n    // These must also be simple definitions and are\n    // appended to otherSimpleDefinitionWords\n    constantSimpleDefinition: [\"constant\"],\n\n    // Words that introduce module variable definitions.\n    // These must also be simple definitions and are\n    // appended to otherSimpleDefinitionWords\n    variableSimpleDefinition: [\"variable\"],\n\n    // Other words that introduce simple definitions\n    // (without implicit bodies).\n    otherSimpleDefinition: [\"generic\", \"domain\",\n                            \"C-pointer-type\",\n                            \"table\"\n                           ],\n\n    // Words that begin statements with implicit bodies.\n    statement: [\"if\", \"block\", \"begin\", \"method\", \"case\",\n                \"for\", \"select\", \"when\", \"unless\", \"until\",\n                \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"\n               ],\n\n    // Patterns that act as separators in compound statements.\n    // This may include any general pattern that must be indented\n    // specially.\n    separator: [\"finally\", \"exception\", \"cleanup\", \"else\",\n                \"elseif\", \"afterwards\"\n               ],\n\n    // Keywords that do not require special indentation handling,\n    // but which should be highlighted\n    other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\",\n            \"instance\", \"let\", \"local\", \"otherwise\", \"slot\",\n            \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"\n           ],\n\n    // Condition signaling function calls\n    signalingCalls: [\"signal\", \"error\", \"cerror\",\n                     \"break\", \"check-type\", \"abort\"\n                    ]\n  };\n\n  words[\"otherDefinition\"] =\n    words[\"unnamedDefinition\"]\n    .concat(words[\"namedDefinition\"])\n    .concat(words[\"otherParameterizedDefinition\"]);\n\n  words[\"definition\"] =\n    words[\"typeParameterizedDefinition\"]\n    .concat(words[\"otherDefinition\"]);\n\n  words[\"parameterizedDefinition\"] =\n    words[\"typeParameterizedDefinition\"]\n    .concat(words[\"otherParameterizedDefinition\"]);\n\n  words[\"simpleDefinition\"] =\n    words[\"constantSimpleDefinition\"]\n    .concat(words[\"variableSimpleDefinition\"])\n    .concat(words[\"otherSimpleDefinition\"]);\n\n  words[\"keyword\"] =\n    words[\"statement\"]\n    .concat(words[\"separator\"])\n    .concat(words[\"other\"]);\n\n  // Patterns\n  var symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\n  var symbol = new RegExp(\"^\" + symbolPattern);\n  var patterns = {\n    // Symbols with special syntax\n    symbolKeyword: symbolPattern + \":\",\n    symbolClass: \"<\" + symbolPattern + \">\",\n    symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n    symbolConstant: \"\\\\$\" + symbolPattern\n  };\n  var patternStyles = {\n    symbolKeyword: \"atom\",\n    symbolClass: \"tag\",\n    symbolGlobal: \"variable-2\",\n    symbolConstant: \"variable-3\"\n  };\n\n  // Compile all patterns to regular expressions\n  for (var patternName in patterns)\n    if (patterns.hasOwnProperty(patternName))\n      patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\n\n  // Names beginning \"with-\" and \"without-\" are commonly\n  // used as statement macro\n  patterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\n\n  var styles = {};\n  styles[\"keyword\"] = \"keyword\";\n  styles[\"definition\"] = \"def\";\n  styles[\"simpleDefinition\"] = \"def\";\n  styles[\"signalingCalls\"] = \"builtin\";\n\n  // protected words lookup table\n  var wordLookup = {};\n  var styleLookup = {};\n\n  [\n    \"keyword\",\n    \"definition\",\n    \"simpleDefinition\",\n    \"signalingCalls\"\n  ].forEach(function(type) {\n    words[type].forEach(function(word) {\n      wordLookup[word] = type;\n      styleLookup[word] = styles[type];\n    });\n  });\n\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  var type, content;\n\n  function ret(_type, style, _content) {\n    type = _type;\n    content = _content;\n    return style;\n  }\n\n  function tokenBase(stream, state) {\n    // String\n    var ch = stream.peek();\n    if (ch == \"'\" || ch == '\"') {\n      stream.next();\n      return chain(stream, state, tokenString(ch, \"string\", \"string\"));\n    }\n    // Comment\n    else if (ch == \"/\") {\n      stream.next();\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else {\n        stream.skipTo(\" \");\n        return ret(\"operator\", \"operator\");\n      }\n    }\n    // Decimal\n    else if (/\\d/.test(ch)) {\n      stream.match(/^\\d*(?:\\.\\d*)?(?:e[+\\-]?\\d+)?/);\n      return ret(\"number\", \"number\");\n    }\n    // Hash\n    else if (ch == \"#\") {\n      stream.next();\n      // Symbol with string syntax\n      ch = stream.peek();\n      if (ch == '\"') {\n        stream.next();\n        return chain(stream, state, tokenString('\"', \"symbol\", \"string-2\"));\n      }\n      // Binary number\n      else if (ch == \"b\") {\n        stream.next();\n        stream.eatWhile(/[01]/);\n        return ret(\"number\", \"number\");\n      }\n      // Hex number\n      else if (ch == \"x\") {\n        stream.next();\n        stream.eatWhile(/[\\da-f]/i);\n        return ret(\"number\", \"number\");\n      }\n      // Octal number\n      else if (ch == \"o\") {\n        stream.next();\n        stream.eatWhile(/[0-7]/);\n        return ret(\"number\", \"number\");\n      }\n      // Hash symbol\n      else {\n        stream.eatWhile(/[-a-zA-Z]/);\n        return ret(\"hash\", \"keyword\");\n      }\n    } else if (stream.match(\"end\")) {\n      return ret(\"end\", \"keyword\");\n    }\n    for (var name in patterns) {\n      if (patterns.hasOwnProperty(name)) {\n        var pattern = patterns[name];\n        if ((pattern instanceof Array && pattern.some(function(p) {\n          return stream.match(p);\n        })) || stream.match(pattern))\n          return ret(name, patternStyles[name], stream.current());\n      }\n    }\n    if (stream.match(\"define\")) {\n      return ret(\"definition\", \"def\");\n    } else {\n      stream.eatWhile(/[\\w\\-]/);\n      // Keyword\n      if (wordLookup[stream.current()]) {\n        return ret(wordLookup[stream.current()], styleLookup[stream.current()], stream.current());\n      } else if (stream.current().match(symbol)) {\n        return ret(\"variable\", \"variable\");\n      } else {\n        stream.next();\n        return ret(\"other\", \"variable-2\");\n      }\n    }\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false,\n    ch;\n    while ((ch = stream.next())) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenString(quote, type, style) {\n    return function(stream, state) {\n      var next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote) {\n          end = true;\n          break;\n        }\n      }\n      if (end)\n        state.tokenize = tokenBase;\n      return ret(type, style);\n    };\n  }\n\n  // Interface\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        currentIndent: 0\n      };\n    },\n    token: function(stream, state) {\n      if (stream.eatSpace())\n        return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    },\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-dylan\", \"dylan\");\n\n});\n"]}