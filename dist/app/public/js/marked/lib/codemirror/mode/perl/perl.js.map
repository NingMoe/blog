{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/perl/perl.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","PERL","elsif","unless","foreach","accept","alarm","bind","binmode","bless","bootstrap","caller","chdir","chmod","chomp","chop","chown","chr","chroot","close","closedir","connect","crypt","dbmclose","dbmopen","defined","die","dump","each","endgrent","endhostent","endnetent","endprotoent","endpwent","endservent","eof","exists","exit","fcntl","fileno","flock","fork","format","formline","getc","getgrent","getgrgid","getgrnam","gethostbyaddr","gethostbyname","gethostent","getlogin","getnetbyaddr","getnetbyname","getnetent","getpeername","getpgrp","getppid","getpriority","getprotobyname","getprotobynumber","getprotoent","getpwent","getpwnam","getpwuid","getservbyname","getservbyport","getservent","getsockname","getsockopt","given","glob","gmtime","grep","hex","index","ioctl","keys","kill","last","lc","lcfirst","length","listen","local","localtime","lock","lstat","m","map","mkdir","msgctl","msgget","msgrcv","msgsnd","my","next","no","oct","open","opendir","ord","our","pack","pipe","pop","pos","print","printf","prototype","push","q","qq","qr","quotemeta","qw","qx","rand","read","readdir","readline","readlink","readpipe","recv","redo","ref","rename","reset","reverse","rewinddir","rindex","rmdir","s","say","scalar","seek","seekdir","select","semctl","semget","semop","send","setgrent","sethostent","setnetent","setpgrp","setpriority","setprotoent","setpwent","setservent","setsockopt","shift","shmctl","shmget","shmread","shmwrite","shutdown","sleep","socket","socketpair","splice","sprintf","srand","stat","state","study","symlink","syscall","sysopen","sysread","sysseek","system","syswrite","tell","telldir","tie","tied","time","times","tr","truncate","uc","ucfirst","umask","undef","unlink","unpack","unshift","untie","use","utime","values","vec","wait","waitpid","wantarray","warn","when","write","y","RXstyle","RXmodifiers","tokenChain","stream","chain","style","tail","tokenize","e","c","i","undefined","eatWhile","tokenPerl","tokenSOMETHING","string","skipToEnd","eatSpace","match","current","substr","sol","ch","prefix","p","n","eat","look","test","eatSuffix","suffix","l","startState","token","lineComment","registerHelper","defineMIME","charAt","x"],"mappings":"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","file":"perl.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// CodeMirror2 mode/perl/perl.js (text/x-perl) beta 0.10 (2011-11-08)\n// This is a part of CodeMirror from https://github.com/sabaca/CodeMirror_mode_perl (mail@sabaca.com)\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"perl\",function(){\n        // http://perldoc.perl.org\n        var PERL={                                      //   null - magic touch\n                                                        //   1 - keyword\n                                                        //   2 - def\n                                                        //   3 - atom\n                                                        //   4 - operator\n                                                        //   5 - variable-2 (predefined)\n                                                        //   [x,y] - x=1,2,3; y=must be defined if x{...}\n                                                //      PERL operators\n                '->'                            :   4,\n                '++'                            :   4,\n                '--'                            :   4,\n                '**'                            :   4,\n                                                        //   ! ~ \\ and unary + and -\n                '=~'                            :   4,\n                '!~'                            :   4,\n                '*'                             :   4,\n                '/'                             :   4,\n                '%'                             :   4,\n                'x'                             :   4,\n                '+'                             :   4,\n                '-'                             :   4,\n                '.'                             :   4,\n                '<<'                            :   4,\n                '>>'                            :   4,\n                                                        //   named unary operators\n                '<'                             :   4,\n                '>'                             :   4,\n                '<='                            :   4,\n                '>='                            :   4,\n                'lt'                            :   4,\n                'gt'                            :   4,\n                'le'                            :   4,\n                'ge'                            :   4,\n                '=='                            :   4,\n                '!='                            :   4,\n                '<=>'                           :   4,\n                'eq'                            :   4,\n                'ne'                            :   4,\n                'cmp'                           :   4,\n                '~~'                            :   4,\n                '&'                             :   4,\n                '|'                             :   4,\n                '^'                             :   4,\n                '&&'                            :   4,\n                '||'                            :   4,\n                '//'                            :   4,\n                '..'                            :   4,\n                '...'                           :   4,\n                '?'                             :   4,\n                ':'                             :   4,\n                '='                             :   4,\n                '+='                            :   4,\n                '-='                            :   4,\n                '*='                            :   4,  //   etc. ???\n                ','                             :   4,\n                '=>'                            :   4,\n                '::'                            :   4,\n                                                        //   list operators (rightward)\n                'not'                           :   4,\n                'and'                           :   4,\n                'or'                            :   4,\n                'xor'                           :   4,\n                                                //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)\n                'BEGIN'                         :   [5,1],\n                'END'                           :   [5,1],\n                'PRINT'                         :   [5,1],\n                'PRINTF'                        :   [5,1],\n                'GETC'                          :   [5,1],\n                'READ'                          :   [5,1],\n                'READLINE'                      :   [5,1],\n                'DESTROY'                       :   [5,1],\n                'TIE'                           :   [5,1],\n                'TIEHANDLE'                     :   [5,1],\n                'UNTIE'                         :   [5,1],\n                'STDIN'                         :    5,\n                'STDIN_TOP'                     :    5,\n                'STDOUT'                        :    5,\n                'STDOUT_TOP'                    :    5,\n                'STDERR'                        :    5,\n                'STDERR_TOP'                    :    5,\n                '$ARG'                          :    5,\n                '$_'                            :    5,\n                '@ARG'                          :    5,\n                '@_'                            :    5,\n                '$LIST_SEPARATOR'               :    5,\n                '$\"'                            :    5,\n                '$PROCESS_ID'                   :    5,\n                '$PID'                          :    5,\n                '$$'                            :    5,\n                '$REAL_GROUP_ID'                :    5,\n                '$GID'                          :    5,\n                '$('                            :    5,\n                '$EFFECTIVE_GROUP_ID'           :    5,\n                '$EGID'                         :    5,\n                '$)'                            :    5,\n                '$PROGRAM_NAME'                 :    5,\n                '$0'                            :    5,\n                '$SUBSCRIPT_SEPARATOR'          :    5,\n                '$SUBSEP'                       :    5,\n                '$;'                            :    5,\n                '$REAL_USER_ID'                 :    5,\n                '$UID'                          :    5,\n                '$<'                            :    5,\n                '$EFFECTIVE_USER_ID'            :    5,\n                '$EUID'                         :    5,\n                '$>'                            :    5,\n                '$a'                            :    5,\n                '$b'                            :    5,\n                '$COMPILING'                    :    5,\n                '$^C'                           :    5,\n                '$DEBUGGING'                    :    5,\n                '$^D'                           :    5,\n                '${^ENCODING}'                  :    5,\n                '$ENV'                          :    5,\n                '%ENV'                          :    5,\n                '$SYSTEM_FD_MAX'                :    5,\n                '$^F'                           :    5,\n                '@F'                            :    5,\n                '${^GLOBAL_PHASE}'              :    5,\n                '$^H'                           :    5,\n                '%^H'                           :    5,\n                '@INC'                          :    5,\n                '%INC'                          :    5,\n                '$INPLACE_EDIT'                 :    5,\n                '$^I'                           :    5,\n                '$^M'                           :    5,\n                '$OSNAME'                       :    5,\n                '$^O'                           :    5,\n                '${^OPEN}'                      :    5,\n                '$PERLDB'                       :    5,\n                '$^P'                           :    5,\n                '$SIG'                          :    5,\n                '%SIG'                          :    5,\n                '$BASETIME'                     :    5,\n                '$^T'                           :    5,\n                '${^TAINT}'                     :    5,\n                '${^UNICODE}'                   :    5,\n                '${^UTF8CACHE}'                 :    5,\n                '${^UTF8LOCALE}'                :    5,\n                '$PERL_VERSION'                 :    5,\n                '$^V'                           :    5,\n                '${^WIN32_SLOPPY_STAT}'         :    5,\n                '$EXECUTABLE_NAME'              :    5,\n                '$^X'                           :    5,\n                '$1'                            :    5, // - regexp $1, $2...\n                '$MATCH'                        :    5,\n                '$&'                            :    5,\n                '${^MATCH}'                     :    5,\n                '$PREMATCH'                     :    5,\n                '$`'                            :    5,\n                '${^PREMATCH}'                  :    5,\n                '$POSTMATCH'                    :    5,\n                \"$'\"                            :    5,\n                '${^POSTMATCH}'                 :    5,\n                '$LAST_PAREN_MATCH'             :    5,\n                '$+'                            :    5,\n                '$LAST_SUBMATCH_RESULT'         :    5,\n                '$^N'                           :    5,\n                '@LAST_MATCH_END'               :    5,\n                '@+'                            :    5,\n                '%LAST_PAREN_MATCH'             :    5,\n                '%+'                            :    5,\n                '@LAST_MATCH_START'             :    5,\n                '@-'                            :    5,\n                '%LAST_MATCH_START'             :    5,\n                '%-'                            :    5,\n                '$LAST_REGEXP_CODE_RESULT'      :    5,\n                '$^R'                           :    5,\n                '${^RE_DEBUG_FLAGS}'            :    5,\n                '${^RE_TRIE_MAXBUF}'            :    5,\n                '$ARGV'                         :    5,\n                '@ARGV'                         :    5,\n                'ARGV'                          :    5,\n                'ARGVOUT'                       :    5,\n                '$OUTPUT_FIELD_SEPARATOR'       :    5,\n                '$OFS'                          :    5,\n                '$,'                            :    5,\n                '$INPUT_LINE_NUMBER'            :    5,\n                '$NR'                           :    5,\n                '$.'                            :    5,\n                '$INPUT_RECORD_SEPARATOR'       :    5,\n                '$RS'                           :    5,\n                '$/'                            :    5,\n                '$OUTPUT_RECORD_SEPARATOR'      :    5,\n                '$ORS'                          :    5,\n                '$\\\\'                           :    5,\n                '$OUTPUT_AUTOFLUSH'             :    5,\n                '$|'                            :    5,\n                '$ACCUMULATOR'                  :    5,\n                '$^A'                           :    5,\n                '$FORMAT_FORMFEED'              :    5,\n                '$^L'                           :    5,\n                '$FORMAT_PAGE_NUMBER'           :    5,\n                '$%'                            :    5,\n                '$FORMAT_LINES_LEFT'            :    5,\n                '$-'                            :    5,\n                '$FORMAT_LINE_BREAK_CHARACTERS' :    5,\n                '$:'                            :    5,\n                '$FORMAT_LINES_PER_PAGE'        :    5,\n                '$='                            :    5,\n                '$FORMAT_TOP_NAME'              :    5,\n                '$^'                            :    5,\n                '$FORMAT_NAME'                  :    5,\n                '$~'                            :    5,\n                '${^CHILD_ERROR_NATIVE}'        :    5,\n                '$EXTENDED_OS_ERROR'            :    5,\n                '$^E'                           :    5,\n                '$EXCEPTIONS_BEING_CAUGHT'      :    5,\n                '$^S'                           :    5,\n                '$WARNING'                      :    5,\n                '$^W'                           :    5,\n                '${^WARNING_BITS}'              :    5,\n                '$OS_ERROR'                     :    5,\n                '$ERRNO'                        :    5,\n                '$!'                            :    5,\n                '%OS_ERROR'                     :    5,\n                '%ERRNO'                        :    5,\n                '%!'                            :    5,\n                '$CHILD_ERROR'                  :    5,\n                '$?'                            :    5,\n                '$EVAL_ERROR'                   :    5,\n                '$@'                            :    5,\n                '$OFMT'                         :    5,\n                '$#'                            :    5,\n                '$*'                            :    5,\n                '$ARRAY_BASE'                   :    5,\n                '$['                            :    5,\n                '$OLD_PERL_VERSION'             :    5,\n                '$]'                            :    5,\n                                                //      PERL blocks\n                'if'                            :[1,1],\n                elsif                           :[1,1],\n                'else'                          :[1,1],\n                'while'                         :[1,1],\n                unless                          :[1,1],\n                'for'                           :[1,1],\n                foreach                         :[1,1],\n                                                //      PERL functions\n                'abs'                           :1,     // - absolute value function\n                accept                          :1,     // - accept an incoming socket connect\n                alarm                           :1,     // - schedule a SIGALRM\n                'atan2'                         :1,     // - arctangent of Y/X in the range -PI to PI\n                bind                            :1,     // - binds an address to a socket\n                binmode                         :1,     // - prepare binary files for I/O\n                bless                           :1,     // - create an object\n                bootstrap                       :1,     //\n                'break'                         :1,     // - break out of a \"given\" block\n                caller                          :1,     // - get context of the current subroutine call\n                chdir                           :1,     // - change your current working directory\n                chmod                           :1,     // - changes the permissions on a list of files\n                chomp                           :1,     // - remove a trailing record separator from a string\n                chop                            :1,     // - remove the last character from a string\n                chown                           :1,     // - change the owership on a list of files\n                chr                             :1,     // - get character this number represents\n                chroot                          :1,     // - make directory new root for path lookups\n                close                           :1,     // - close file (or pipe or socket) handle\n                closedir                        :1,     // - close directory handle\n                connect                         :1,     // - connect to a remote socket\n                'continue'                      :[1,1], // - optional trailing block in a while or foreach\n                'cos'                           :1,     // - cosine function\n                crypt                           :1,     // - one-way passwd-style encryption\n                dbmclose                        :1,     // - breaks binding on a tied dbm file\n                dbmopen                         :1,     // - create binding on a tied dbm file\n                'default'                       :1,     //\n                defined                         :1,     // - test whether a value, variable, or function is defined\n                'delete'                        :1,     // - deletes a value from a hash\n                die                             :1,     // - raise an exception or bail out\n                'do'                            :1,     // - turn a BLOCK into a TERM\n                dump                            :1,     // - create an immediate core dump\n                each                            :1,     // - retrieve the next key/value pair from a hash\n                endgrent                        :1,     // - be done using group file\n                endhostent                      :1,     // - be done using hosts file\n                endnetent                       :1,     // - be done using networks file\n                endprotoent                     :1,     // - be done using protocols file\n                endpwent                        :1,     // - be done using passwd file\n                endservent                      :1,     // - be done using services file\n                eof                             :1,     // - test a filehandle for its end\n                'eval'                          :1,     // - catch exceptions or compile and run code\n                'exec'                          :1,     // - abandon this program to run another\n                exists                          :1,     // - test whether a hash key is present\n                exit                            :1,     // - terminate this program\n                'exp'                           :1,     // - raise I to a power\n                fcntl                           :1,     // - file control system call\n                fileno                          :1,     // - return file descriptor from filehandle\n                flock                           :1,     // - lock an entire file with an advisory lock\n                fork                            :1,     // - create a new process just like this one\n                format                          :1,     // - declare a picture format with use by the write() function\n                formline                        :1,     // - internal function used for formats\n                getc                            :1,     // - get the next character from the filehandle\n                getgrent                        :1,     // - get next group record\n                getgrgid                        :1,     // - get group record given group user ID\n                getgrnam                        :1,     // - get group record given group name\n                gethostbyaddr                   :1,     // - get host record given its address\n                gethostbyname                   :1,     // - get host record given name\n                gethostent                      :1,     // - get next hosts record\n                getlogin                        :1,     // - return who logged in at this tty\n                getnetbyaddr                    :1,     // - get network record given its address\n                getnetbyname                    :1,     // - get networks record given name\n                getnetent                       :1,     // - get next networks record\n                getpeername                     :1,     // - find the other end of a socket connection\n                getpgrp                         :1,     // - get process group\n                getppid                         :1,     // - get parent process ID\n                getpriority                     :1,     // - get current nice value\n                getprotobyname                  :1,     // - get protocol record given name\n                getprotobynumber                :1,     // - get protocol record numeric protocol\n                getprotoent                     :1,     // - get next protocols record\n                getpwent                        :1,     // - get next passwd record\n                getpwnam                        :1,     // - get passwd record given user login name\n                getpwuid                        :1,     // - get passwd record given user ID\n                getservbyname                   :1,     // - get services record given its name\n                getservbyport                   :1,     // - get services record given numeric port\n                getservent                      :1,     // - get next services record\n                getsockname                     :1,     // - retrieve the sockaddr for a given socket\n                getsockopt                      :1,     // - get socket options on a given socket\n                given                           :1,     //\n                glob                            :1,     // - expand filenames using wildcards\n                gmtime                          :1,     // - convert UNIX time into record or string using Greenwich time\n                'goto'                          :1,     // - create spaghetti code\n                grep                            :1,     // - locate elements in a list test true against a given criterion\n                hex                             :1,     // - convert a string to a hexadecimal number\n                'import'                        :1,     // - patch a module's namespace into your own\n                index                           :1,     // - find a substring within a string\n                'int'                           :1,     // - get the integer portion of a number\n                ioctl                           :1,     // - system-dependent device control system call\n                'join'                          :1,     // - join a list into a string using a separator\n                keys                            :1,     // - retrieve list of indices from a hash\n                kill                            :1,     // - send a signal to a process or process group\n                last                            :1,     // - exit a block prematurely\n                lc                              :1,     // - return lower-case version of a string\n                lcfirst                         :1,     // - return a string with just the next letter in lower case\n                length                          :1,     // - return the number of bytes in a string\n                'link'                          :1,     // - create a hard link in the filesytem\n                listen                          :1,     // - register your socket as a server\n                local                           : 2,    // - create a temporary value for a global variable (dynamic scoping)\n                localtime                       :1,     // - convert UNIX time into record or string using local time\n                lock                            :1,     // - get a thread lock on a variable, subroutine, or method\n                'log'                           :1,     // - retrieve the natural logarithm for a number\n                lstat                           :1,     // - stat a symbolic link\n                m                               :null,  // - match a string with a regular expression pattern\n                map                             :1,     // - apply a change to a list to get back a new list with the changes\n                mkdir                           :1,     // - create a directory\n                msgctl                          :1,     // - SysV IPC message control operations\n                msgget                          :1,     // - get SysV IPC message queue\n                msgrcv                          :1,     // - receive a SysV IPC message from a message queue\n                msgsnd                          :1,     // - send a SysV IPC message to a message queue\n                my                              : 2,    // - declare and assign a local variable (lexical scoping)\n                'new'                           :1,     //\n                next                            :1,     // - iterate a block prematurely\n                no                              :1,     // - unimport some module symbols or semantics at compile time\n                oct                             :1,     // - convert a string to an octal number\n                open                            :1,     // - open a file, pipe, or descriptor\n                opendir                         :1,     // - open a directory\n                ord                             :1,     // - find a character's numeric representation\n                our                             : 2,    // - declare and assign a package variable (lexical scoping)\n                pack                            :1,     // - convert a list into a binary representation\n                'package'                       :1,     // - declare a separate global namespace\n                pipe                            :1,     // - open a pair of connected filehandles\n                pop                             :1,     // - remove the last element from an array and return it\n                pos                             :1,     // - find or set the offset for the last/next m//g search\n                print                           :1,     // - output a list to a filehandle\n                printf                          :1,     // - output a formatted list to a filehandle\n                prototype                       :1,     // - get the prototype (if any) of a subroutine\n                push                            :1,     // - append one or more elements to an array\n                q                               :null,  // - singly quote a string\n                qq                              :null,  // - doubly quote a string\n                qr                              :null,  // - Compile pattern\n                quotemeta                       :null,  // - quote regular expression magic characters\n                qw                              :null,  // - quote a list of words\n                qx                              :null,  // - backquote quote a string\n                rand                            :1,     // - retrieve the next pseudorandom number\n                read                            :1,     // - fixed-length buffered input from a filehandle\n                readdir                         :1,     // - get a directory from a directory handle\n                readline                        :1,     // - fetch a record from a file\n                readlink                        :1,     // - determine where a symbolic link is pointing\n                readpipe                        :1,     // - execute a system command and collect standard output\n                recv                            :1,     // - receive a message over a Socket\n                redo                            :1,     // - start this loop iteration over again\n                ref                             :1,     // - find out the type of thing being referenced\n                rename                          :1,     // - change a filename\n                require                         :1,     // - load in external functions from a library at runtime\n                reset                           :1,     // - clear all variables of a given name\n                'return'                        :1,     // - get out of a function early\n                reverse                         :1,     // - flip a string or a list\n                rewinddir                       :1,     // - reset directory handle\n                rindex                          :1,     // - right-to-left substring search\n                rmdir                           :1,     // - remove a directory\n                s                               :null,  // - replace a pattern with a string\n                say                             :1,     // - print with newline\n                scalar                          :1,     // - force a scalar context\n                seek                            :1,     // - reposition file pointer for random-access I/O\n                seekdir                         :1,     // - reposition directory pointer\n                select                          :1,     // - reset default output or do I/O multiplexing\n                semctl                          :1,     // - SysV semaphore control operations\n                semget                          :1,     // - get set of SysV semaphores\n                semop                           :1,     // - SysV semaphore operations\n                send                            :1,     // - send a message over a socket\n                setgrent                        :1,     // - prepare group file for use\n                sethostent                      :1,     // - prepare hosts file for use\n                setnetent                       :1,     // - prepare networks file for use\n                setpgrp                         :1,     // - set the process group of a process\n                setpriority                     :1,     // - set a process's nice value\n                setprotoent                     :1,     // - prepare protocols file for use\n                setpwent                        :1,     // - prepare passwd file for use\n                setservent                      :1,     // - prepare services file for use\n                setsockopt                      :1,     // - set some socket options\n                shift                           :1,     // - remove the first element of an array, and return it\n                shmctl                          :1,     // - SysV shared memory operations\n                shmget                          :1,     // - get SysV shared memory segment identifier\n                shmread                         :1,     // - read SysV shared memory\n                shmwrite                        :1,     // - write SysV shared memory\n                shutdown                        :1,     // - close down just half of a socket connection\n                'sin'                           :1,     // - return the sine of a number\n                sleep                           :1,     // - block for some number of seconds\n                socket                          :1,     // - create a socket\n                socketpair                      :1,     // - create a pair of sockets\n                'sort'                          :1,     // - sort a list of values\n                splice                          :1,     // - add or remove elements anywhere in an array\n                'split'                         :1,     // - split up a string using a regexp delimiter\n                sprintf                         :1,     // - formatted print into a string\n                'sqrt'                          :1,     // - square root function\n                srand                           :1,     // - seed the random number generator\n                stat                            :1,     // - get a file's status information\n                state                           :1,     // - declare and assign a state variable (persistent lexical scoping)\n                study                           :1,     // - optimize input data for repeated searches\n                'sub'                           :1,     // - declare a subroutine, possibly anonymously\n                'substr'                        :1,     // - get or alter a portion of a stirng\n                symlink                         :1,     // - create a symbolic link to a file\n                syscall                         :1,     // - execute an arbitrary system call\n                sysopen                         :1,     // - open a file, pipe, or descriptor\n                sysread                         :1,     // - fixed-length unbuffered input from a filehandle\n                sysseek                         :1,     // - position I/O pointer on handle used with sysread and syswrite\n                system                          :1,     // - run a separate program\n                syswrite                        :1,     // - fixed-length unbuffered output to a filehandle\n                tell                            :1,     // - get current seekpointer on a filehandle\n                telldir                         :1,     // - get current seekpointer on a directory handle\n                tie                             :1,     // - bind a variable to an object class\n                tied                            :1,     // - get a reference to the object underlying a tied variable\n                time                            :1,     // - return number of seconds since 1970\n                times                           :1,     // - return elapsed time for self and child processes\n                tr                              :null,  // - transliterate a string\n                truncate                        :1,     // - shorten a file\n                uc                              :1,     // - return upper-case version of a string\n                ucfirst                         :1,     // - return a string with just the next letter in upper case\n                umask                           :1,     // - set file creation mode mask\n                undef                           :1,     // - remove a variable or function definition\n                unlink                          :1,     // - remove one link to a file\n                unpack                          :1,     // - convert binary structure into normal perl variables\n                unshift                         :1,     // - prepend more elements to the beginning of a list\n                untie                           :1,     // - break a tie binding to a variable\n                use                             :1,     // - load in a module at compile time\n                utime                           :1,     // - set a file's last access and modify times\n                values                          :1,     // - return a list of the values in a hash\n                vec                             :1,     // - test or set particular bits in a string\n                wait                            :1,     // - wait for any child process to die\n                waitpid                         :1,     // - wait for a particular child process to die\n                wantarray                       :1,     // - get void vs scalar vs list context of current subroutine call\n                warn                            :1,     // - print debugging info\n                when                            :1,     //\n                write                           :1,     // - print a picture record\n                y                               :null}; // - transliterate a string\n\n        var RXstyle=\"string-2\";\n        var RXmodifiers=/[goseximacplud]/;              // NOTE: \"m\", \"s\", \"y\" and \"tr\" need to correct real modifiers for each regexp type\n\n        function tokenChain(stream,state,chain,style,tail){     // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)\n                state.chain=null;                               //                                                          12   3tail\n                state.style=null;\n                state.tail=null;\n                state.tokenize=function(stream,state){\n                        var e=false,c,i=0;\n                        while(c=stream.next()){\n                                if(c===chain[i]&&!e){\n                                        if(chain[++i]!==undefined){\n                                                state.chain=chain[i];\n                                                state.style=style;\n                                                state.tail=tail;}\n                                        else if(tail)\n                                                stream.eatWhile(tail);\n                                        state.tokenize=tokenPerl;\n                                        return style;}\n                                e=!e&&c==\"\\\\\";}\n                        return style;};\n                return state.tokenize(stream,state);}\n\n        function tokenSOMETHING(stream,state,string){\n                state.tokenize=function(stream,state){\n                        if(stream.string==string)\n                                state.tokenize=tokenPerl;\n                        stream.skipToEnd();\n                        return \"string\";};\n                return state.tokenize(stream,state);}\n\n        function tokenPerl(stream,state){\n                if(stream.eatSpace())\n                        return null;\n                if(state.chain)\n                        return tokenChain(stream,state,state.chain,state.style,state.tail);\n                if(stream.match(/^\\-?[\\d\\.]/,false))\n                        if(stream.match(/^(\\-?(\\d*\\.\\d+(e[+-]?\\d+)?|\\d+\\.\\d*)|0x[\\da-fA-F]+|0b[01]+|\\d+(e[+-]?\\d+)?)/))\n                                return 'number';\n                if(stream.match(/^<<(?=\\w)/)){                  // NOTE: <<SOMETHING\\n...\\nSOMETHING\\n\n                        stream.eatWhile(/\\w/);\n                        return tokenSOMETHING(stream,state,stream.current().substr(2));}\n                if(stream.sol()&&stream.match(/^\\=item(?!\\w)/)){// NOTE: \\n=item...\\n=cut\\n\n                        return tokenSOMETHING(stream,state,'=cut');}\n                var ch=stream.next();\n                if(ch=='\"'||ch==\"'\"){                           // NOTE: ' or \" or <<'SOMETHING'\\n...\\nSOMETHING\\n or <<\"SOMETHING\"\\n...\\nSOMETHING\\n\n                        if(prefix(stream, 3)==\"<<\"+ch){\n                                var p=stream.pos;\n                                stream.eatWhile(/\\w/);\n                                var n=stream.current().substr(1);\n                                if(n&&stream.eat(ch))\n                                        return tokenSOMETHING(stream,state,n);\n                                stream.pos=p;}\n                        return tokenChain(stream,state,[ch],\"string\");}\n                if(ch==\"q\"){\n                        var c=look(stream, -2);\n                        if(!(c&&/\\w/.test(c))){\n                                c=look(stream, 0);\n                                if(c==\"x\"){\n                                        c=look(stream, 1);\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\n                                else if(c==\"q\"){\n                                        c=look(stream, 1);\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\")\"],\"string\");}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"]\"],\"string\");}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"}\"],\"string\");}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\">\"],\"string\");}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[stream.eat(c)],\"string\");}}\n                                else if(c==\"w\"){\n                                        c=look(stream, 1);\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\")\"],\"bracket\");}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"]\"],\"bracket\");}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"}\"],\"bracket\");}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\">\"],\"bracket\");}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[stream.eat(c)],\"bracket\");}}\n                                else if(c==\"r\"){\n                                        c=look(stream, 1);\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\n                                else if(/[\\^'\"!~\\/(\\[{<]/.test(c)){\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[\")\"],\"string\");}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[\"]\"],\"string\");}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[\"}\"],\"string\");}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[\">\"],\"string\");}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                return tokenChain(stream,state,[stream.eat(c)],\"string\");}}}}\n                if(ch==\"m\"){\n                        var c=look(stream, -2);\n                        if(!(c&&/\\w/.test(c))){\n                                c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n                                if(c){\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                return tokenChain(stream,state,[c],RXstyle,RXmodifiers);}\n                                        if(c==\"(\"){\n                                                return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n                                        if(c==\"[\"){\n                                                return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n                                        if(c==\"{\"){\n                                                return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n                                        if(c==\"<\"){\n                                                return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}}}}\n                if(ch==\"s\"){\n                        var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n                        if(!c){\n                                c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n                                if(c){\n                                        if(c==\"[\")\n                                                return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n                                        if(c==\"{\")\n                                                return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n                                        if(c==\"<\")\n                                                return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n                                        if(c==\"(\")\n                                                return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n                                        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\n                if(ch==\"y\"){\n                        var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n                        if(!c){\n                                c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n                                if(c){\n                                        if(c==\"[\")\n                                                return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n                                        if(c==\"{\")\n                                                return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n                                        if(c==\"<\")\n                                                return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n                                        if(c==\"(\")\n                                                return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n                                        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\n                if(ch==\"t\"){\n                        var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n                        if(!c){\n                                c=stream.eat(\"r\");if(c){\n                                c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n                                if(c){\n                                        if(c==\"[\")\n                                                return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n                                        if(c==\"{\")\n                                                return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n                                        if(c==\"<\")\n                                                return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n                                        if(c==\"(\")\n                                                return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n                                        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}}\n                if(ch==\"`\"){\n                        return tokenChain(stream,state,[ch],\"variable-2\");}\n                if(ch==\"/\"){\n                        if(!/~\\s*$/.test(prefix(stream)))\n                                return \"operator\";\n                        else\n                                return tokenChain(stream,state,[ch],RXstyle,RXmodifiers);}\n                if(ch==\"$\"){\n                        var p=stream.pos;\n                        if(stream.eatWhile(/\\d/)||stream.eat(\"{\")&&stream.eatWhile(/\\d/)&&stream.eat(\"}\"))\n                                return \"variable-2\";\n                        else\n                                stream.pos=p;}\n                if(/[$@%]/.test(ch)){\n                        var p=stream.pos;\n                        if(stream.eat(\"^\")&&stream.eat(/[A-Z]/)||!/[@$%&]/.test(look(stream, -2))&&stream.eat(/[=|\\\\\\-#?@;:&`~\\^!\\[\\]*'\"$+.,\\/<>()]/)){\n                                var c=stream.current();\n                                if(PERL[c])\n                                        return \"variable-2\";}\n                        stream.pos=p;}\n                if(/[$@%&]/.test(ch)){\n                        if(stream.eatWhile(/[\\w$\\[\\]]/)||stream.eat(\"{\")&&stream.eatWhile(/[\\w$\\[\\]]/)&&stream.eat(\"}\")){\n                                var c=stream.current();\n                                if(PERL[c])\n                                        return \"variable-2\";\n                                else\n                                        return \"variable\";}}\n                if(ch==\"#\"){\n                        if(look(stream, -2)!=\"$\"){\n                                stream.skipToEnd();\n                                return \"comment\";}}\n                if(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/.test(ch)){\n                        var p=stream.pos;\n                        stream.eatWhile(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/);\n                        if(PERL[stream.current()])\n                                return \"operator\";\n                        else\n                                stream.pos=p;}\n                if(ch==\"_\"){\n                        if(stream.pos==1){\n                                if(suffix(stream, 6)==\"_END__\"){\n                                        return tokenChain(stream,state,['\\0'],\"comment\");}\n                                else if(suffix(stream, 7)==\"_DATA__\"){\n                                        return tokenChain(stream,state,['\\0'],\"variable-2\");}\n                                else if(suffix(stream, 7)==\"_C__\"){\n                                        return tokenChain(stream,state,['\\0'],\"string\");}}}\n                if(/\\w/.test(ch)){\n                        var p=stream.pos;\n                        if(look(stream, -2)==\"{\"&&(look(stream, 0)==\"}\"||stream.eatWhile(/\\w/)&&look(stream, 0)==\"}\"))\n                                return \"string\";\n                        else\n                                stream.pos=p;}\n                if(/[A-Z]/.test(ch)){\n                        var l=look(stream, -2);\n                        var p=stream.pos;\n                        stream.eatWhile(/[A-Z_]/);\n                        if(/[\\da-z]/.test(look(stream, 0))){\n                                stream.pos=p;}\n                        else{\n                                var c=PERL[stream.current()];\n                                if(!c)\n                                        return \"meta\";\n                                if(c[1])\n                                        c=c[0];\n                                if(l!=\":\"){\n                                        if(c==1)\n                                                return \"keyword\";\n                                        else if(c==2)\n                                                return \"def\";\n                                        else if(c==3)\n                                                return \"atom\";\n                                        else if(c==4)\n                                                return \"operator\";\n                                        else if(c==5)\n                                                return \"variable-2\";\n                                        else\n                                                return \"meta\";}\n                                else\n                                        return \"meta\";}}\n                if(/[a-zA-Z_]/.test(ch)){\n                        var l=look(stream, -2);\n                        stream.eatWhile(/\\w/);\n                        var c=PERL[stream.current()];\n                        if(!c)\n                                return \"meta\";\n                        if(c[1])\n                                c=c[0];\n                        if(l!=\":\"){\n                                if(c==1)\n                                        return \"keyword\";\n                                else if(c==2)\n                                        return \"def\";\n                                else if(c==3)\n                                        return \"atom\";\n                                else if(c==4)\n                                        return \"operator\";\n                                else if(c==5)\n                                        return \"variable-2\";\n                                else\n                                        return \"meta\";}\n                        else\n                                return \"meta\";}\n                return null;}\n\n        return {\n            startState: function() {\n                return {\n                    tokenize: tokenPerl,\n                    chain: null,\n                    style: null,\n                    tail: null\n                };\n            },\n            token: function(stream, state) {\n                return (state.tokenize || tokenPerl)(stream, state);\n            },\n            lineComment: '#'\n        };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"perl\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/x-perl\", \"perl\");\n\n// it's like \"peek\", but need for look-ahead or look-behind if index < 0\nfunction look(stream, c){\n  return stream.string.charAt(stream.pos+(c||0));\n}\n\n// return a part of prefix of current stream from current position\nfunction prefix(stream, c){\n  if(c){\n    var x=stream.pos-c;\n    return stream.string.substr((x>=0?x:0),c);}\n  else{\n    return stream.string.substr(0,stream.pos-1);\n  }\n}\n\n// return a part of suffix of current stream from current position\nfunction suffix(stream, c){\n  var y=stream.string.length;\n  var x=y-stream.pos+1;\n  return stream.string.substr(stream.pos,(c&&c<y?c:x));\n}\n\n// eating and vomiting a part of stream from current position\nfunction eatSuffix(stream, c){\n  var x=stream.pos+c;\n  var y;\n  if(x<=0)\n    stream.pos=0;\n  else if(x>=(y=stream.string.length-1))\n    stream.pos=y;\n  else\n    stream.pos=x;\n}\n\n});\n"]}