{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/cypher/cypher.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","wordRegexp","words","RegExp","join","defineMode","config","tokenBase","stream","ch","next","curPunc","match","test","eat","skipToEnd","operatorChars","eatWhile","word","current","funcs","preds","keywords","pushContext","state","type","col","context","prev","indent","popContext","indentUnit","startState","tokenize","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","commands","newlineAndIndent","modeExtensions","autoFormatLineBreaks","text","i","lines","reProcessedPortion","split","length","replace","trim","defineMIME"],"mappings":";;;;AAAA;AACA;;AAEA;AACA;;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,QAAOC,OAAP,yCAAOA,OAAP,MAAkB,QAAlB,IAA8B,QAAOC,MAAP,yCAAOA,MAAP,MAAiB,QAAnD,EAA6D;AAC3DF,QAAIG,QAAQ,sBAAR,CAAJ,EADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,OAAOC,GAA1C,EAA+C;AAClDD,WAAO,CAAC,sBAAD,CAAP,EAAiCJ,GAAjC,EADG,KAEA;AACHA,QAAIM,UAAJ;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACtB;;AACA,MAAIC,aAAa,SAAbA,UAAa,CAASC,KAAT,EAAgB;AAC/B,WAAO,IAAIC,MAAJ,CAAW,SAASD,MAAME,IAAN,CAAW,GAAX,CAAT,GAA2B,IAAtC,EAA4C,GAA5C,CAAP;AACD,GAFD;;AAIAJ,aAAWK,UAAX,CAAsB,QAAtB,EAAgC,UAASC,MAAT,EAAiB;AAC/C,QAAIC,YAAY,SAAZA,SAAY,CAASC,MAAT,CAAe,WAAf,EAA4B;AAC1C,UAAIC,KAAKD,OAAOE,IAAP,EAAT;AAAA,UAAwBC,UAAU,IAAlC;AACA,UAAIF,OAAO,IAAP,IAAeA,OAAO,GAA1B,EAA+B;AAC7BD,eAAOI,KAAP,CAAa,SAAb;AACA,eAAO,QAAP;AACD;AACD,UAAI,mBAAmBC,IAAnB,CAAwBJ,EAAxB,CAAJ,EAAiC;AAC/BE,kBAAUF,EAAV;AACA,eAAO,MAAP;AACD,OAHD,MAGO,IAAIA,OAAO,GAAP,IAAcD,OAAOM,GAAP,CAAW,GAAX,CAAlB,EAAmC;AACxCN,eAAOO,SAAP;AACA,eAAO,SAAP;AACD,OAHM,MAGA,IAAIC,cAAcH,IAAd,CAAmBJ,EAAnB,CAAJ,EAA4B;AACjCD,eAAOS,QAAP,CAAgBD,aAAhB;AACA,eAAO,IAAP;AACD,OAHM,MAGA;AACLR,eAAOS,QAAP,CAAgB,SAAhB;AACA,YAAIT,OAAOM,GAAP,CAAW,GAAX,CAAJ,EAAqB;AACnBN,iBAAOS,QAAP,CAAgB,WAAhB;AACA,iBAAO,MAAP;AACD;AACD,YAAIC,OAAOV,OAAOW,OAAP,EAAX;AACA,YAAIC,MAAMP,IAAN,CAAWK,IAAX,CAAJ,EAAsB,OAAO,SAAP;AACtB,YAAIG,MAAMR,IAAN,CAAWK,IAAX,CAAJ,EAAsB,OAAO,KAAP;AACtB,YAAII,SAAST,IAAT,CAAcK,IAAd,CAAJ,EAAyB,OAAO,SAAP;AACzB,eAAO,UAAP;AACD;AACF,KA3BD;AA4BA,QAAIK,cAAc,SAAdA,WAAc,CAASC,KAAT,EAAgBC,IAAhB,EAAsBC,GAAtB,EAA2B;AAC3C,aAAOF,MAAMG,OAAN,GAAgB;AACrBC,cAAMJ,MAAMG,OADS;AAErBE,gBAAQL,MAAMK,MAFO;AAGrBH,aAAKA,GAHgB;AAIrBD,cAAMA;AAJe,OAAvB;AAMD,KAPD;AAQA,QAAIK,aAAa,SAAbA,UAAa,CAASN,KAAT,EAAgB;AAC/BA,YAAMK,MAAN,GAAeL,MAAMG,OAAN,CAAcE,MAA7B;AACA,aAAOL,MAAMG,OAAN,GAAgBH,MAAMG,OAAN,CAAcC,IAArC;AACD,KAHD;AAIA,QAAIG,aAAazB,OAAOyB,UAAxB;AACA,QAAIpB,OAAJ;AACA,QAAIS,QAAQnB,WAAW,CAAC,KAAD,EAAQ,MAAR,EAAgB,kBAAhB,EAAoC,MAApC,EAA4C,MAA5C,EAAoD,OAApD,EAA6D,KAA7D,EAAoE,MAApE,EAA4E,UAA5E,EAAwF,SAAxF,EAAmG,KAAnG,EAA0G,KAA1G,EAAiH,OAAjH,EAA0H,SAA1H,EAAqI,GAArI,EAA0I,SAA1I,EAAqJ,KAArJ,EAA4J,SAA5J,EAAuK,QAAvK,EAAiL,OAAjL,EAA0L,UAA1L,EAAsM,MAAtM,EAA8M,IAA9M,EAAoN,MAApN,EAA4N,QAA5N,EAAsO,MAAtO,EAA8O,MAA9O,EAAsP,QAAtP,EAAgQ,KAAhQ,EAAuQ,OAAvQ,EAAgR,OAAhR,EAAyR,OAAzR,EAAkS,KAAlS,EAAyS,KAAzS,EAAgT,MAAhT,EAAwT,OAAxT,EAAiU,gBAAjU,EAAmV,gBAAnV,EAAqW,IAArW,EAA2W,SAA3W,EAAsX,MAAtX,EAA8X,OAA9X,EAAuY,QAAvY,EAAiZ,KAAjZ,EAAwZ,cAAxZ,EAAwa,eAAxa,EAAyb,SAAzb,EAAoc,OAApc,EAA6c,OAA7c,EAAsd,OAAtd,EAA+d,cAA/d,EAA+e,MAA/e,EAAuf,KAAvf,EAA8f,OAA9f,EAAugB,MAAvgB,EAA+gB,WAA/gB,EAA4hB,OAA5hB,EAAqiB,QAAriB,EAA+iB,KAA/iB,EAAsjB,WAAtjB,EAAmkB,KAAnkB,EAA0kB,MAA1kB,EAAklB,KAAllB,EAAylB,WAAzlB,EAAsmB,SAAtmB,EAAinB,OAAjnB,EAA0nB,MAA1nB,EAAkoB,MAAloB,EAA0oB,OAA1oB,CAAX,CAAZ;AACA,QAAIoB,QAAQpB,WAAW,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,IAA7B,EAAmC,MAAnC,EAA2C,KAA3C,EAAkD,IAAlD,EAAwD,QAAxD,EAAkE,KAAlE,CAAX,CAAZ;AACA,QAAIqB,WAAWrB,WAAW,CAAC,IAAD,EAAO,KAAP,EAAc,WAAd,EAA2B,QAA3B,EAAqC,IAArC,EAA2C,MAA3C,EAAmD,QAAnD,EAA6D,YAA7D,EAA2E,QAA3E,EAAqF,KAArF,EAA4F,QAA5F,EAAsG,QAAtG,EAAgH,MAAhH,EAAwH,YAAxH,EAAsI,UAAtI,EAAkJ,MAAlJ,EAA0J,MAA1J,EAAkK,KAAlK,EAAyK,SAAzK,EAAoL,OAApL,EAA6L,iBAA7L,EAAgN,SAAhN,EAA2N,MAA3N,EAAmO,SAAnO,EAA8O,IAA9O,EAAoP,OAApP,EAA6P,IAA7P,EAAmQ,OAAnQ,EAA4Q,MAA5Q,EAAoR,OAApR,EAA6R,OAA7R,EAAsS,MAAtS,EAA8S,IAA9S,EAAoT,UAApT,EAAgU,OAAhU,EAAyU,UAAzU,EAAqV,SAArV,EAAgW,QAAhW,EAA0W,QAA1W,EAAoX,MAApX,EAA4X,KAA5X,EAAmY,MAAnY,EAA2Y,OAA3Y,EAAoZ,MAApZ,EAA4Z,MAA5Z,EAAoa,OAApa,EAA6a,QAA7a,EAAub,QAAvb,EAAic,OAAjc,EAA0c,MAA1c,EAAkd,OAAld,EAA2d,MAA3d,CAAX,CAAf;AACA,QAAIe,gBAAgB,gBAApB;;AAEA,WAAO;AACLgB,kBAAY,sBAAS,QAAU;AAC7B,eAAO;AACLC,oBAAU1B,SADL;AAELoB,mBAAS,IAFJ;AAGLE,kBAAQ,CAHH;AAILH,eAAK;AAJA,SAAP;AAMD,OARI;AASLQ,aAAO,eAAS1B,MAAT,EAAiBgB,KAAjB,EAAwB;AAC7B,YAAIhB,OAAO2B,GAAP,EAAJ,EAAkB;AAChB,cAAIX,MAAMG,OAAN,IAAkBH,MAAMG,OAAN,CAAcS,KAAd,IAAuB,IAA7C,EAAoD;AAClDZ,kBAAMG,OAAN,CAAcS,KAAd,GAAsB,KAAtB;AACD;AACDZ,gBAAMK,MAAN,GAAerB,OAAO6B,WAAP,EAAf;AACD;AACD,YAAI7B,OAAO8B,QAAP,EAAJ,EAAuB;AACrB,iBAAO,IAAP;AACD;AACD,YAAIC,QAAQf,MAAMS,QAAN,CAAezB,MAAf,EAAuBgB,KAAvB,CAAZ;AACA,YAAIe,UAAU,SAAV,IAAuBf,MAAMG,OAA7B,IAAyCH,MAAMG,OAAN,CAAcS,KAAd,IAAuB,IAAhE,IAAyEZ,MAAMG,OAAN,CAAcF,IAAd,KAAuB,SAApG,EAA+G;AAC7GD,gBAAMG,OAAN,CAAcS,KAAd,GAAsB,IAAtB;AACD;AACD,YAAIzB,YAAY,GAAhB,EAAqB;AACnBY,sBAAYC,KAAZ,EAAmB,GAAnB,EAAwBhB,OAAOgC,MAAP,EAAxB;AACD,SAFD,MAEO,IAAI7B,YAAY,GAAhB,EAAqB;AAC1BY,sBAAYC,KAAZ,EAAmB,GAAnB,EAAwBhB,OAAOgC,MAAP,EAAxB;AACD,SAFM,MAEA,IAAI7B,YAAY,GAAhB,EAAqB;AAC1BY,sBAAYC,KAAZ,EAAmB,GAAnB,EAAwBhB,OAAOgC,MAAP,EAAxB;AACD,SAFM,MAEA,IAAI,WAAW3B,IAAX,CAAgBF,OAAhB,CAAJ,EAA8B;AACnC,iBAAOa,MAAMG,OAAN,IAAiBH,MAAMG,OAAN,CAAcF,IAAd,KAAuB,SAA/C,EAA0D;AACxDK,uBAAWN,KAAX;AACD;AACD,cAAIA,MAAMG,OAAN,IAAiBhB,YAAYa,MAAMG,OAAN,CAAcF,IAA/C,EAAqD;AACnDK,uBAAWN,KAAX;AACD;AACF,SAPM,MAOA,IAAIb,YAAY,GAAZ,IAAmBa,MAAMG,OAAzB,IAAoCH,MAAMG,OAAN,CAAcF,IAAd,KAAuB,SAA/D,EAA0E;AAC/EK,qBAAWN,KAAX;AACD,SAFM,MAEA,IAAI,uBAAuBX,IAAvB,CAA4B0B,KAA5B,KAAsCf,MAAMG,OAAhD,EAAyD;AAC9D,cAAI,SAASd,IAAT,CAAcW,MAAMG,OAAN,CAAcF,IAA5B,CAAJ,EAAuC;AACrCF,wBAAYC,KAAZ,EAAmB,SAAnB,EAA8BhB,OAAOgC,MAAP,EAA9B;AACD,WAFD,MAEO,IAAIhB,MAAMG,OAAN,CAAcF,IAAd,KAAuB,SAAvB,IAAoC,CAACD,MAAMG,OAAN,CAAcS,KAAvD,EAA8D;AACnEZ,kBAAMG,OAAN,CAAcS,KAAd,GAAsB,IAAtB;AACAZ,kBAAMG,OAAN,CAAcD,GAAd,GAAoBlB,OAAOgC,MAAP,EAApB;AACD;AACF;AACD,eAAOD,KAAP;AACD,OA/CI;AAgDLV,cAAQ,gBAASL,KAAT,EAAgBiB,SAAhB,EAA2B;AACjC,YAAIC,YAAYD,aAAaA,UAAUE,MAAV,CAAiB,CAAjB,CAA7B;AACA,YAAIhB,UAAUH,MAAMG,OAApB;AACA,YAAI,SAASd,IAAT,CAAc6B,SAAd,CAAJ,EAA8B;AAC5B,iBAAOf,WAAWA,QAAQF,IAAR,KAAiB,SAAnC,EAA8C;AAC5CE,sBAAUA,QAAQC,IAAlB;AACD;AACF;AACD,YAAIgB,UAAUjB,WAAWe,cAAcf,QAAQF,IAA/C;AACA,YAAI,CAACE,OAAL,EAAc,OAAO,CAAP;AACd,YAAIA,QAAQF,IAAR,KAAiB,UAArB,EAAiC,OAAOzB,WAAW6C,QAAX,CAAoBC,gBAA3B;AACjC,YAAInB,QAAQS,KAAZ,EAAmB,OAAOT,QAAQD,GAAR,IAAekB,UAAU,CAAV,GAAc,CAA7B,CAAP;AACnB,eAAOjB,QAAQE,MAAR,IAAkBe,UAAU,CAAV,GAAcb,UAAhC,CAAP;AACD;AA7DI,KAAP;AA+DD,GA/GD;;AAiHA/B,aAAW+C,cAAX,CAA0B,QAA1B,IAAsC;AACpCC,0BAAsB,8BAASC,IAAT,EAAe;AACnC,UAAIC,CAAJ,EAAOC,KAAP,EAAcC,kBAAd;AACA,UAAID,QAAQF,KAAKI,KAAL,CAAW,IAAX,CAAZ;AACA,UAAID,qBAAqB,2EAAzB;AACA,WAAK,IAAIF,IAAI,CAAb,EAAgBA,IAAIC,MAAMG,MAA1B,EAAkCJ,GAAlC;AACEC,cAAMD,CAAN,IAAWC,MAAMD,CAAN,EAASK,OAAT,CAAiBH,kBAAjB,EAAqC,QAArC,EAA+CI,IAA/C,EAAX;AADF,OAEA,OAAOL,MAAM/C,IAAN,CAAW,IAAX,CAAP;AACD;AARmC,GAAtC;;AAWAJ,aAAWyD,UAAX,CAAsB,4BAAtB,EAAoD,QAApD;AAED,CA3ID","file":"cypher.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// By the Neo4j Team and contributors.\n// https://github.com/neo4j-contrib/CodeMirror\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var wordRegexp = function(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  };\n\n  CodeMirror.defineMode(\"cypher\", function(config) {\n    var tokenBase = function(stream/*, state*/) {\n      var ch = stream.next(), curPunc = null;\n      if (ch === \"\\\"\" || ch === \"'\") {\n        stream.match(/.+?[\"']/);\n        return \"string\";\n      }\n      if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        curPunc = ch;\n        return \"node\";\n      } else if (ch === \"/\" && stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (operatorChars.test(ch)) {\n        stream.eatWhile(operatorChars);\n        return null;\n      } else {\n        stream.eatWhile(/[_\\w\\d]/);\n        if (stream.eat(\":\")) {\n          stream.eatWhile(/[\\w\\d_\\-]/);\n          return \"atom\";\n        }\n        var word = stream.current();\n        if (funcs.test(word)) return \"builtin\";\n        if (preds.test(word)) return \"def\";\n        if (keywords.test(word)) return \"keyword\";\n        return \"variable\";\n      }\n    };\n    var pushContext = function(state, type, col) {\n      return state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    };\n    var popContext = function(state) {\n      state.indent = state.context.indent;\n      return state.context = state.context.prev;\n    };\n    var indentUnit = config.indentUnit;\n    var curPunc;\n    var funcs = wordRegexp([\"abs\", \"acos\", \"allShortestPaths\", \"asin\", \"atan\", \"atan2\", \"avg\", \"ceil\", \"coalesce\", \"collect\", \"cos\", \"cot\", \"count\", \"degrees\", \"e\", \"endnode\", \"exp\", \"extract\", \"filter\", \"floor\", \"haversin\", \"head\", \"id\", \"keys\", \"labels\", \"last\", \"left\", \"length\", \"log\", \"log10\", \"lower\", \"ltrim\", \"max\", \"min\", \"node\", \"nodes\", \"percentileCont\", \"percentileDisc\", \"pi\", \"radians\", \"rand\", \"range\", \"reduce\", \"rel\", \"relationship\", \"relationships\", \"replace\", \"right\", \"round\", \"rtrim\", \"shortestPath\", \"sign\", \"sin\", \"split\", \"sqrt\", \"startnode\", \"stdev\", \"stdevp\", \"str\", \"substring\", \"sum\", \"tail\", \"tan\", \"timestamp\", \"toFloat\", \"toInt\", \"trim\", \"type\", \"upper\"]);\n    var preds = wordRegexp([\"all\", \"and\", \"any\", \"has\", \"in\", \"none\", \"not\", \"or\", \"single\", \"xor\"]);\n    var keywords = wordRegexp([\"as\", \"asc\", \"ascending\", \"assert\", \"by\", \"case\", \"commit\", \"constraint\", \"create\", \"csv\", \"cypher\", \"delete\", \"desc\", \"descending\", \"distinct\", \"drop\", \"else\", \"end\", \"explain\", \"false\", \"fieldterminator\", \"foreach\", \"from\", \"headers\", \"in\", \"index\", \"is\", \"limit\", \"load\", \"match\", \"merge\", \"null\", \"on\", \"optional\", \"order\", \"periodic\", \"profile\", \"remove\", \"return\", \"scan\", \"set\", \"skip\", \"start\", \"then\", \"true\", \"union\", \"unique\", \"unwind\", \"using\", \"when\", \"where\", \"with\"]);\n    var operatorChars = /[*+\\-<>=&|~%^]/;\n\n    return {\n      startState: function(/*base*/) {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function(stream, state) {\n        if (stream.sol()) {\n          if (state.context && (state.context.align == null)) {\n            state.context.align = false;\n          }\n          state.indent = stream.indentation();\n        }\n        if (stream.eatSpace()) {\n          return null;\n        }\n        var style = state.tokenize(stream, state);\n        if (style !== \"comment\" && state.context && (state.context.align == null) && state.context.type !== \"pattern\") {\n          state.context.align = true;\n        }\n        if (curPunc === \"(\") {\n          pushContext(state, \")\", stream.column());\n        } else if (curPunc === \"[\") {\n          pushContext(state, \"]\", stream.column());\n        } else if (curPunc === \"{\") {\n          pushContext(state, \"}\", stream.column());\n        } else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type === \"pattern\") {\n            popContext(state);\n          }\n          if (state.context && curPunc === state.context.type) {\n            popContext(state);\n          }\n        } else if (curPunc === \".\" && state.context && state.context.type === \"pattern\") {\n          popContext(state);\n        } else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) {\n            pushContext(state, \"pattern\", stream.column());\n          } else if (state.context.type === \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n        return style;\n      },\n      indent: function(state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) {\n          while (context && context.type === \"pattern\") {\n            context = context.prev;\n          }\n        }\n        var closing = context && firstChar === context.type;\n        if (!context) return 0;\n        if (context.type === \"keywords\") return CodeMirror.commands.newlineAndIndent;\n        if (context.align) return context.col + (closing ? 0 : 1);\n        return context.indent + (closing ? 0 : indentUnit);\n      }\n    };\n  });\n\n  CodeMirror.modeExtensions[\"cypher\"] = {\n    autoFormatLineBreaks: function(text) {\n      var i, lines, reProcessedPortion;\n      var lines = text.split(\"\\n\");\n      var reProcessedPortion = /\\s+\\b(return|where|order by|match|with|skip|limit|create|delete|set)\\b\\s/g;\n      for (var i = 0; i < lines.length; i++)\n        lines[i] = lines[i].replace(reProcessedPortion, \" \\n$1 \").trim();\n      return lines.join(\"\\n\");\n    }\n  };\n\n  CodeMirror.defineMIME(\"application/x-cypher-query\", \"cypher\");\n\n});\n"]}