{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/pascal/pascal.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","words","str","obj","split","i","length","keywords","atoms","isOperatorChar","tokenBase","stream","state","ch","next","startOfLine","skipToEnd","tokenize","tokenString","eat","tokenComment","test","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","startState","token","eatSpace","style","electricChars","defineMIME"],"mappings":"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","file":"pascal.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pascal\", function() {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = words(\"and array begin case const div do downto else end file for forward integer \" +\n                       \"boolean char function goto if in label mod nil not of or packed procedure \" +\n                       \"program record repeat set string then to type until var while with\");\n  var atoms = {\"null\": true};\n\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == \"#\" && state.startOfLine) {\n      stream.skipToEnd();\n      return \"meta\";\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"(\" && stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \")\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  // Interface\n\n  return {\n    startState: function() {\n      return {tokenize: null};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      return style;\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n\n});\n"]}