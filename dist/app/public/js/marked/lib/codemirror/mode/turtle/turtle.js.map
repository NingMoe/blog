{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/turtle/turtle.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","indentUnit","curPunc","wordRegexp","words","RegExp","join","ops","keywords","operatorChars","tokenBase","stream","state","ch","next","match","tokenize","tokenLiteral","test","skipToEnd","eatWhile","peek","word","current","quote","escaped","pushContext","type","col","context","prev","indent","popContext","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","lineComment","defineMIME"],"mappings":";;;;AAAA;AACA;;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,QAAOC,OAAP,yCAAOA,OAAP,MAAkB,QAAlB,IAA8B,QAAOC,MAAP,yCAAOA,MAAP,MAAiB,QAAnD,EAA6D;AAC3DF,QAAIG,QAAQ,sBAAR,CAAJ,EADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,OAAOC,GAA1C,EAA+C;AAClDD,WAAO,CAAC,sBAAD,CAAP,EAAiCJ,GAAjC,EADG,KAEA;AACHA,QAAIM,UAAJ;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACxB;;AAEAA,aAAWC,UAAX,CAAsB,QAAtB,EAAgC,UAASC,MAAT,EAAiB;AAC/C,QAAIC,aAAaD,OAAOC,UAAxB;AACA,QAAIC,OAAJ;;AAEA,aAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,aAAO,IAAIC,MAAJ,CAAW,SAASD,MAAME,IAAN,CAAW,GAAX,CAAT,GAA2B,IAAtC,EAA4C,GAA5C,CAAP;AACD;AACD,QAAIC,MAAMJ,WAAW,EAAX,CAAV;AACA,QAAIK,WAAWL,WAAW,CAAC,SAAD,EAAY,OAAZ,EAAqB,GAArB,CAAX,CAAf;AACA,QAAIM,gBAAgB,aAApB;;AAEA,aAASC,SAAT,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkC;AAChC,UAAIC,KAAKF,OAAOG,IAAP,EAAT;AACAZ,gBAAU,IAAV;AACA,UAAIW,MAAM,GAAN,IAAa,CAACF,OAAOI,KAAP,CAAa,cAAb,EAA6B,KAA7B,CAAlB,EAAuD;AACrDJ,eAAOI,KAAP,CAAa,kBAAb;AACA,eAAO,MAAP;AACD,OAHD,MAIK,IAAIF,MAAM,IAAN,IAAcA,MAAM,GAAxB,EAA6B;AAChCD,cAAMI,QAAN,GAAiBC,aAAaJ,EAAb,CAAjB;AACA,eAAOD,MAAMI,QAAN,CAAeL,MAAf,EAAuBC,KAAvB,CAAP;AACD,OAHI,MAIA,IAAI,mBAAmBM,IAAnB,CAAwBL,EAAxB,CAAJ,EAAiC;AACpCX,kBAAUW,EAAV;AACA,eAAO,IAAP;AACD,OAHI,MAIA,IAAIA,MAAM,GAAV,EAAe;AAClBF,eAAOQ,SAAP;AACA,eAAO,SAAP;AACD,OAHI,MAIA,IAAIV,cAAcS,IAAd,CAAmBL,EAAnB,CAAJ,EAA4B;AAC/BF,eAAOS,QAAP,CAAgBX,aAAhB;AACA,eAAO,IAAP;AACD,OAHI,MAIA,IAAII,MAAM,GAAV,EAAe;AACd,eAAO,UAAP;AACD,OAFA,MAEM;AACTF,eAAOS,QAAP,CAAgB,SAAhB;AACA,YAAGT,OAAOU,IAAP,MAAiB,GAApB,EAAyB;AACvB,iBAAO,YAAP;AACD,SAFD,MAEO;AACA,cAAIC,OAAOX,OAAOY,OAAP,EAAX;;AAEA,cAAGf,SAASU,IAAT,CAAcI,IAAd,CAAH,EAAwB;AACb,mBAAO,MAAP;AACV;;AAED,cAAGT,MAAM,GAAN,IAAaA,MAAM,GAAtB,EAA2B;AACpB,mBAAO,SAAP;AACF,WAFL,MAEW;AACA,mBAAO,SAAP;AACN;AACX;AACD,YAAIS,OAAOX,OAAOY,OAAP,EAAX;AACA,YAAIhB,IAAIW,IAAJ,CAASI,IAAT,CAAJ,EACE,OAAO,IAAP,CADF,KAEK,IAAId,SAASU,IAAT,CAAcI,IAAd,CAAJ,EACH,OAAO,MAAP,CADG,KAGH,OAAO,UAAP;AACH;AACF;;AAED,aAASL,YAAT,CAAsBO,KAAtB,EAA6B;AAC3B,aAAO,UAASb,MAAT,EAAiBC,KAAjB,EAAwB;AAC7B,YAAIa,UAAU,KAAd;AAAA,YAAqBZ,EAArB;AACA,eAAO,CAACA,KAAKF,OAAOG,IAAP,EAAN,KAAwB,IAA/B,EAAqC;AACnC,cAAID,MAAMW,KAAN,IAAe,CAACC,OAApB,EAA6B;AAC3Bb,kBAAMI,QAAN,GAAiBN,SAAjB;AACA;AACD;AACDe,oBAAU,CAACA,OAAD,IAAYZ,MAAM,IAA5B;AACD;AACD,eAAO,QAAP;AACD,OAVD;AAWD;;AAED,aAASa,WAAT,CAAqBd,KAArB,EAA4Be,IAA5B,EAAkCC,GAAlC,EAAuC;AACrChB,YAAMiB,OAAN,GAAgB,EAACC,MAAMlB,MAAMiB,OAAb,EAAsBE,QAAQnB,MAAMmB,MAApC,EAA4CH,KAAKA,GAAjD,EAAsDD,MAAMA,IAA5D,EAAhB;AACD;AACD,aAASK,UAAT,CAAoBpB,KAApB,EAA2B;AACzBA,YAAMmB,MAAN,GAAenB,MAAMiB,OAAN,CAAcE,MAA7B;AACAnB,YAAMiB,OAAN,GAAgBjB,MAAMiB,OAAN,CAAcC,IAA9B;AACD;;AAED,WAAO;AACLG,kBAAY,sBAAW;AACrB,eAAO,EAACjB,UAAUN,SAAX;AACCmB,mBAAS,IADV;AAECE,kBAAQ,CAFT;AAGCH,eAAK,CAHN,EAAP;AAID,OANI;;AAQLM,aAAO,eAASvB,MAAT,EAAiBC,KAAjB,EAAwB;AAC7B,YAAID,OAAOwB,GAAP,EAAJ,EAAkB;AAChB,cAAIvB,MAAMiB,OAAN,IAAiBjB,MAAMiB,OAAN,CAAcO,KAAd,IAAuB,IAA5C,EAAkDxB,MAAMiB,OAAN,CAAcO,KAAd,GAAsB,KAAtB;AAClDxB,gBAAMmB,MAAN,GAAepB,OAAO0B,WAAP,EAAf;AACD;AACD,YAAI1B,OAAO2B,QAAP,EAAJ,EAAuB,OAAO,IAAP;AACvB,YAAIC,QAAQ3B,MAAMI,QAAN,CAAeL,MAAf,EAAuBC,KAAvB,CAAZ;;AAEA,YAAI2B,SAAS,SAAT,IAAsB3B,MAAMiB,OAA5B,IAAuCjB,MAAMiB,OAAN,CAAcO,KAAd,IAAuB,IAA9D,IAAsExB,MAAMiB,OAAN,CAAcF,IAAd,IAAsB,SAAhG,EAA2G;AACzGf,gBAAMiB,OAAN,CAAcO,KAAd,GAAsB,IAAtB;AACD;;AAED,YAAIlC,WAAW,GAAf,EAAoBwB,YAAYd,KAAZ,EAAmB,GAAnB,EAAwBD,OAAO6B,MAAP,EAAxB,EAApB,KACK,IAAItC,WAAW,GAAf,EAAoBwB,YAAYd,KAAZ,EAAmB,GAAnB,EAAwBD,OAAO6B,MAAP,EAAxB,EAApB,KACA,IAAItC,WAAW,GAAf,EAAoBwB,YAAYd,KAAZ,EAAmB,GAAnB,EAAwBD,OAAO6B,MAAP,EAAxB,EAApB,KACA,IAAI,WAAWtB,IAAX,CAAgBhB,OAAhB,CAAJ,EAA8B;AACjC,iBAAOU,MAAMiB,OAAN,IAAiBjB,MAAMiB,OAAN,CAAcF,IAAd,IAAsB,SAA9C;AAAyDK,uBAAWpB,KAAX;AAAzD,WACA,IAAIA,MAAMiB,OAAN,IAAiB3B,WAAWU,MAAMiB,OAAN,CAAcF,IAA9C,EAAoDK,WAAWpB,KAAX;AACrD,SAHI,MAIA,IAAIV,WAAW,GAAX,IAAkBU,MAAMiB,OAAxB,IAAmCjB,MAAMiB,OAAN,CAAcF,IAAd,IAAsB,SAA7D,EAAwEK,WAAWpB,KAAX,EAAxE,KACA,IAAI,uBAAuBM,IAAvB,CAA4BqB,KAA5B,KAAsC3B,MAAMiB,OAAhD,EAAyD;AAC5D,cAAI,SAASX,IAAT,CAAcN,MAAMiB,OAAN,CAAcF,IAA5B,CAAJ,EACED,YAAYd,KAAZ,EAAmB,SAAnB,EAA8BD,OAAO6B,MAAP,EAA9B,EADF,KAEK,IAAI5B,MAAMiB,OAAN,CAAcF,IAAd,IAAsB,SAAtB,IAAmC,CAACf,MAAMiB,OAAN,CAAcO,KAAtD,EAA6D;AAChExB,kBAAMiB,OAAN,CAAcO,KAAd,GAAsB,IAAtB;AACAxB,kBAAMiB,OAAN,CAAcD,GAAd,GAAoBjB,OAAO6B,MAAP,EAApB;AACD;AACF;;AAED,eAAOD,KAAP;AACD,OAtCI;;AAwCLR,cAAQ,gBAASnB,KAAT,EAAgB6B,SAAhB,EAA2B;AACjC,YAAIC,YAAYD,aAAaA,UAAUE,MAAV,CAAiB,CAAjB,CAA7B;AACA,YAAId,UAAUjB,MAAMiB,OAApB;AACA,YAAI,SAASX,IAAT,CAAcwB,SAAd,CAAJ,EACE,OAAOb,WAAWA,QAAQF,IAAR,IAAgB,SAAlC;AAA6CE,oBAAUA,QAAQC,IAAlB;AAA7C,SAEF,IAAIc,UAAUf,WAAWa,aAAab,QAAQF,IAA9C;AACA,YAAI,CAACE,OAAL,EACE,OAAO,CAAP,CADF,KAEK,IAAIA,QAAQF,IAAR,IAAgB,SAApB,EACH,OAAOE,QAAQD,GAAf,CADG,KAEA,IAAIC,QAAQO,KAAZ,EACH,OAAOP,QAAQD,GAAR,IAAegB,UAAU,CAAV,GAAc,CAA7B,CAAP,CADG,KAGH,OAAOf,QAAQE,MAAR,IAAkBa,UAAU,CAAV,GAAc3C,UAAhC,CAAP;AACH,OAvDI;;AAyDL4C,mBAAa;AAzDR,KAAP;AA2DD,GAhJD;;AAkJA/C,aAAWgD,UAAX,CAAsB,aAAtB,EAAqC,QAArC;AAEC,CA9JD","file":"turtle.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"turtle\", function(config) {\n  var indentUnit = config.indentUnit;\n  var curPunc;\n\n  function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  }\n  var ops = wordRegexp([]);\n  var keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\n  var operatorChars = /[*+\\-<>=&|]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    curPunc = null;\n    if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n      stream.match(/^[^\\s\\u00a0>]*>?/);\n      return \"atom\";\n    }\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenLiteral(ch);\n      return state.tokenize(stream, state);\n    }\n    else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else if (operatorChars.test(ch)) {\n      stream.eatWhile(operatorChars);\n      return null;\n    }\n    else if (ch == \":\") {\n          return \"operator\";\n        } else {\n      stream.eatWhile(/[_\\w\\d]/);\n      if(stream.peek() == \":\") {\n        return \"variable-3\";\n      } else {\n             var word = stream.current();\n\n             if(keywords.test(word)) {\n                        return \"meta\";\n             }\n\n             if(ch >= \"A\" && ch <= \"Z\") {\n                    return \"comment\";\n                 } else {\n                        return \"keyword\";\n                 }\n      }\n      var word = stream.current();\n      if (ops.test(word))\n        return null;\n      else if (keywords.test(word))\n        return \"meta\";\n      else\n        return \"variable\";\n    }\n  }\n\n  function tokenLiteral(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    };\n  }\n\n  function pushContext(state, type, col) {\n    state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n  }\n  function popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              context: null,\n              indent: 0,\n              col: 0};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (state.context && state.context.align == null) state.context.align = false;\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n        state.context.align = true;\n      }\n\n      if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n      else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n      else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n      else if (/[\\]\\}\\)]/.test(curPunc)) {\n        while (state.context && state.context.type == \"pattern\") popContext(state);\n        if (state.context && curPunc == state.context.type) popContext(state);\n      }\n      else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n      else if (/atom|string|variable/.test(style) && state.context) {\n        if (/[\\}\\]]/.test(state.context.type))\n          pushContext(state, \"pattern\", stream.column());\n        else if (state.context.type == \"pattern\" && !state.context.align) {\n          state.context.align = true;\n          state.context.col = stream.column();\n        }\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      var context = state.context;\n      if (/[\\]\\}]/.test(firstChar))\n        while (context && context.type == \"pattern\") context = context.prev;\n\n      var closing = context && firstChar == context.type;\n      if (!context)\n        return 0;\n      else if (context.type == \"pattern\")\n        return context.col;\n      else if (context.align)\n        return context.col + (closing ? 0 : 1);\n      else\n        return context.indent + (closing ? 0 : indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/turtle\", \"turtle\");\n\n});\n"]}