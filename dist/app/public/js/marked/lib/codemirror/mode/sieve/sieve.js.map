{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/sieve/sieve.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","words","str","obj","split","i","length","keywords","atoms","indentUnit","tokenBase","stream","state","ch","next","eat","tokenize","tokenCComment","skipToEnd","tokenString","_indent","push","pop","test","eatWhile","cur","current","tokenMultiLineString","propertyIsEnumerable","_multiLineString","sol","eatSpace","peek","eol","maybeEnd","quote","escaped","startState","base","baseIndent","token","indent","_textAfter","electricChars","defineMIME"],"mappings":"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","file":"sieve.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sieve\", function(config) {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var keywords = words(\"if elsif else stop require\");\n  var atoms = words(\"true false not\");\n  var indentUnit = config.indentUnit;\n\n  function tokenBase(stream, state) {\n\n    var ch = stream.next();\n    if (ch == \"/\" && stream.eat(\"*\")) {\n      state.tokenize = tokenCComment;\n      return tokenCComment(stream, state);\n    }\n\n    if (ch === '#') {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (ch == \"\\\"\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n\n    if (ch == \"(\") {\n      state._indent.push(\"(\");\n      // add virtual angel wings so that editor behaves...\n      // ...more sane incase of broken brackets\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch === \"{\") {\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch == \")\")  {\n      state._indent.pop();\n      state._indent.pop();\n    }\n\n    if (ch === \"}\") {\n      state._indent.pop();\n      return null;\n    }\n\n    if (ch == \",\")\n      return null;\n\n    if (ch == \";\")\n      return null;\n\n\n    if (/[{}\\(\\),;]/.test(ch))\n      return null;\n\n    // 1*DIGIT \"K\" / \"M\" / \"G\"\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\d]/);\n      stream.eat(/[KkMmGg]/);\n      return \"number\";\n    }\n\n    // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n    if (ch == \":\") {\n      stream.eatWhile(/[a-zA-Z_]/);\n      stream.eatWhile(/[a-zA-Z0-9_]/);\n\n      return \"operator\";\n    }\n\n    stream.eatWhile(/\\w/);\n    var cur = stream.current();\n\n    // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n    // *(multiline-literal / multiline-dotstart)\n    // \".\" CRLF\n    if ((cur == \"text\") && stream.eat(\":\"))\n    {\n      state.tokenize = tokenMultiLineString;\n      return \"string\";\n    }\n\n    if (keywords.propertyIsEnumerable(cur))\n      return \"keyword\";\n\n    if (atoms.propertyIsEnumerable(cur))\n      return \"atom\";\n\n    return null;\n  }\n\n  function tokenMultiLineString(stream, state)\n  {\n    state._multiLineString = true;\n    // the first line is special it may contain a comment\n    if (!stream.sol()) {\n      stream.eatSpace();\n\n      if (stream.peek() == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      stream.skipToEnd();\n      return \"string\";\n    }\n\n    if ((stream.next() == \".\")  && (stream.eol()))\n    {\n      state._multiLineString = false;\n      state.tokenize = tokenBase;\n    }\n\n    return \"string\";\n  }\n\n  function tokenCComment(stream, state) {\n    var maybeEnd = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (maybeEnd && ch == \"/\") {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped)\n          break;\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  return {\n    startState: function(base) {\n      return {tokenize: tokenBase,\n              baseIndent: base || 0,\n              _indent: []};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace())\n        return null;\n\n      return (state.tokenize || tokenBase)(stream, state);;\n    },\n\n    indent: function(state, _textAfter) {\n      var length = state._indent.length;\n      if (_textAfter && (_textAfter[0] == \"}\"))\n        length--;\n\n      if (length <0)\n        length = 0;\n\n      return length * indentUnit;\n    },\n\n    electricChars: \"}\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/sieve\", \"sieve\");\n\n});\n"]}