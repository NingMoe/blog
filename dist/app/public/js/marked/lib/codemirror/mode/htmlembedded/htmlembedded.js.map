{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/htmlembedded/htmlembedded.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","scriptStartRegex","scriptEndRegex","scriptingMode","htmlMixedMode","htmlDispatch","stream","state","match","token","scriptingDispatch","scriptState","htmlState","startState","getMode","scriptingModeSpec","startOpen","indent","textAfter","copyState","innerMode","mode","defineMIME","name"],"mappings":"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","file":"htmlembedded.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"htmlembedded\", function(config, parserConfig) {\n\n  //config settings\n  var scriptStartRegex = parserConfig.scriptStartRegex || /^<%/i,\n      scriptEndRegex = parserConfig.scriptEndRegex || /^%>/i;\n\n  //inner modes\n  var scriptingMode, htmlMixedMode;\n\n  //tokenizer when in html mode\n  function htmlDispatch(stream, state) {\n      if (stream.match(scriptStartRegex, false)) {\n          state.token=scriptingDispatch;\n          return scriptingMode.token(stream, state.scriptState);\n          }\n      else\n          return htmlMixedMode.token(stream, state.htmlState);\n    }\n\n  //tokenizer when in scripting mode\n  function scriptingDispatch(stream, state) {\n      if (stream.match(scriptEndRegex, false))  {\n          state.token=htmlDispatch;\n          return htmlMixedMode.token(stream, state.htmlState);\n         }\n      else\n          return scriptingMode.token(stream, state.scriptState);\n         }\n\n\n  return {\n    startState: function() {\n      scriptingMode = scriptingMode || CodeMirror.getMode(config, parserConfig.scriptingModeSpec);\n      htmlMixedMode = htmlMixedMode || CodeMirror.getMode(config, \"htmlmixed\");\n      return {\n          token :  parserConfig.startOpen ? scriptingDispatch : htmlDispatch,\n          htmlState : CodeMirror.startState(htmlMixedMode),\n          scriptState : CodeMirror.startState(scriptingMode)\n      };\n    },\n\n    token: function(stream, state) {\n      return state.token(stream, state);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.token == htmlDispatch)\n        return htmlMixedMode.indent(state.htmlState, textAfter);\n      else if (scriptingMode.indent)\n        return scriptingMode.indent(state.scriptState, textAfter);\n    },\n\n    copyState: function(state) {\n      return {\n       token : state.token,\n       htmlState : CodeMirror.copyState(htmlMixedMode, state.htmlState),\n       scriptState : CodeMirror.copyState(scriptingMode, state.scriptState)\n      };\n    },\n\n    innerMode: function(state) {\n      if (state.token == scriptingDispatch) return {state: state.scriptState, mode: scriptingMode};\n      else return {state: state.htmlState, mode: htmlMixedMode};\n    }\n  };\n}, \"htmlmixed\");\n\nCodeMirror.defineMIME(\"application/x-ejs\", { name: \"htmlembedded\", scriptingModeSpec:\"javascript\"});\nCodeMirror.defineMIME(\"application/x-aspx\", { name: \"htmlembedded\", scriptingModeSpec:\"text/x-csharp\"});\nCodeMirror.defineMIME(\"application/x-jsp\", { name: \"htmlembedded\", scriptingModeSpec:\"text/x-java\"});\nCodeMirror.defineMIME(\"application/x-erb\", { name: \"htmlembedded\", scriptingModeSpec:\"ruby\"});\n\n});\n"]}