{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/mode/coffeescript/coffeescript.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","conf","parserConf","ERRORCLASS","wordRegexp","words","RegExp","join","operators","delimiters","identifiers","properties","wordOperators","indentKeywords","commonKeywords","keywords","concat","stringPrefixes","regexPrefixes","commonConstants","constants","tokenBase","stream","state","sol","scope","align","scopeOffset","offset","eatSpace","lineOffset","indentation","type","dedent","ch","peek","match","skipToEnd","tokenize","longComment","floatLiteral","backUp","intLiteral","tokenFactory","current","next","delimiter","singleline","outclass","eol","eatWhile","eat","singleLineStringErrors","indent","alignOffset","prev","indentUnit","column","length","_indent","matched","tokenLexer","style","test","lambda","delimiter_index","indexOf","slice","exec","external","startState","basecolumn","lastToken","token","fillAlign","content","text","closer","charAt","closes","lineComment","fold","defineMIME"],"mappings":"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","file":"coffeescript.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Link to the project's GitHub page:\n * https://github.com/pickhardt/coffeescript-codemirror-mode\n */\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"coffeescript\", function(conf, parserConf) {\n  var ERRORCLASS = \"error\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var operators = /^(?:->|=>|\\+[+=]?|-[\\-=]?|\\*[\\*=]?|\\/[\\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\\|=?|\\^=?|\\~|!|\\?|(or|and|\\|\\||&&|\\?)=)/;\n  var delimiters = /^(?:[()\\[\\]{},:`=;]|\\.\\.?\\.?)/;\n  var identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;\n  var properties = /^(@|this\\.)[_A-Za-z$][_A-Za-z$0-9]*/;\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\",\n                                  \"is\", \"isnt\", \"in\",\n                                  \"instanceof\", \"typeof\"]);\n  var indentKeywords = [\"for\", \"while\", \"loop\", \"if\", \"unless\", \"else\",\n                        \"switch\", \"try\", \"catch\", \"finally\", \"class\"];\n  var commonKeywords = [\"break\", \"by\", \"continue\", \"debugger\", \"delete\",\n                        \"do\", \"in\", \"of\", \"new\", \"return\", \"then\",\n                        \"this\", \"@\", \"throw\", \"when\", \"until\", \"extends\"];\n\n  var keywords = wordRegexp(indentKeywords.concat(commonKeywords));\n\n  indentKeywords = wordRegexp(indentKeywords);\n\n\n  var stringPrefixes = /^('{3}|\\\"{3}|['\\\"])/;\n  var regexPrefixes = /^(\\/{3}|\\/)/;\n  var commonConstants = [\"Infinity\", \"NaN\", \"undefined\", \"null\", \"true\", \"false\", \"on\", \"off\", \"yes\", \"no\"];\n  var constants = wordRegexp(commonConstants);\n\n  // Tokenizers\n  function tokenBase(stream, state) {\n    // Handle scope changes\n    if (stream.sol()) {\n      if (state.scope.align === null) state.scope.align = false;\n      var scopeOffset = state.scope.offset;\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset && state.scope.type == \"coffee\") {\n          return \"indent\";\n        } else if (lineOffset < scopeOffset) {\n          return \"dedent\";\n        }\n        return null;\n      } else {\n        if (scopeOffset > 0) {\n          dedent(stream, state);\n        }\n      }\n    }\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    var ch = stream.peek();\n\n    // Handle docco title comment (single line)\n    if (stream.match(\"####\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle multi line comments\n    if (stream.match(\"###\")) {\n      state.tokenize = longComment;\n      return state.tokenize(stream, state);\n    }\n\n    // Single line comment\n    if (ch === \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle number literals\n    if (stream.match(/^-?[0-9\\.]/, false)) {\n      var floatLiteral = false;\n      // Floats\n      if (stream.match(/^-?\\d*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n        floatLiteral = true;\n      }\n      if (stream.match(/^-?\\d+\\.\\d*/)) {\n        floatLiteral = true;\n      }\n      if (stream.match(/^-?\\.\\d+/)) {\n        floatLiteral = true;\n      }\n\n      if (floatLiteral) {\n        // prevent from getting extra . on 1..\n        if (stream.peek() == \".\"){\n          stream.backUp(1);\n        }\n        return \"number\";\n      }\n      // Integers\n      var intLiteral = false;\n      // Hex\n      if (stream.match(/^-?0x[0-9a-f]+/i)) {\n        intLiteral = true;\n      }\n      // Decimal\n      if (stream.match(/^-?[1-9]\\d*(e[\\+\\-]?\\d+)?/)) {\n        intLiteral = true;\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^-?0(?![\\dx])/i)) {\n        intLiteral = true;\n      }\n      if (intLiteral) {\n        return \"number\";\n      }\n    }\n\n    // Handle strings\n    if (stream.match(stringPrefixes)) {\n      state.tokenize = tokenFactory(stream.current(), false, \"string\");\n      return state.tokenize(stream, state);\n    }\n    // Handle regex literals\n    if (stream.match(regexPrefixes)) {\n      if (stream.current() != \"/\" || stream.match(/^.*\\//, false)) { // prevent highlight of division\n        state.tokenize = tokenFactory(stream.current(), true, \"string-2\");\n        return state.tokenize(stream, state);\n      } else {\n        stream.backUp(1);\n      }\n    }\n\n    // Handle operators and delimiters\n    if (stream.match(operators) || stream.match(wordOperators)) {\n      return \"operator\";\n    }\n    if (stream.match(delimiters)) {\n      return \"punctuation\";\n    }\n\n    if (stream.match(constants)) {\n      return \"atom\";\n    }\n\n    if (stream.match(keywords)) {\n      return \"keyword\";\n    }\n\n    if (stream.match(identifiers)) {\n      return \"variable\";\n    }\n\n    if (stream.match(properties)) {\n      return \"property\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return ERRORCLASS;\n  }\n\n  function tokenFactory(delimiter, singleline, outclass) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\/\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol()) {\n            return outclass;\n          }\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenBase;\n          return outclass;\n        } else {\n          stream.eat(/['\"\\/]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) {\n          outclass = ERRORCLASS;\n        } else {\n          state.tokenize = tokenBase;\n        }\n      }\n      return outclass;\n    };\n  }\n\n  function longComment(stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^#]/);\n      if (stream.match(\"###\")) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      stream.eatWhile(\"#\");\n    }\n    return \"comment\";\n  }\n\n  function indent(stream, state, type) {\n    type = type || \"coffee\";\n    var offset = 0, align = false, alignOffset = null;\n    for (var scope = state.scope; scope; scope = scope.prev) {\n      if (scope.type === \"coffee\" || scope.type == \"}\") {\n        offset = scope.offset + conf.indentUnit;\n        break;\n      }\n    }\n    if (type !== \"coffee\") {\n      align = null;\n      alignOffset = stream.column() + stream.current().length;\n    } else if (state.scope.align) {\n      state.scope.align = false;\n    }\n    state.scope = {\n      offset: offset,\n      type: type,\n      prev: state.scope,\n      align: align,\n      alignOffset: alignOffset\n    };\n  }\n\n  function dedent(stream, state) {\n    if (!state.scope.prev) return;\n    if (state.scope.type === \"coffee\") {\n      var _indent = stream.indentation();\n      var matched = false;\n      for (var scope = state.scope; scope; scope = scope.prev) {\n        if (_indent === scope.offset) {\n          matched = true;\n          break;\n        }\n      }\n      if (!matched) {\n        return true;\n      }\n      while (state.scope.prev && state.scope.offset !== _indent) {\n        state.scope = state.scope.prev;\n      }\n      return false;\n    } else {\n      state.scope = state.scope.prev;\n      return false;\n    }\n  }\n\n  function tokenLexer(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    // Handle \".\" connected identifiers\n    if (current === \".\") {\n      style = state.tokenize(stream, state);\n      current = stream.current();\n      if (/^\\.[\\w$]+$/.test(current)) {\n        return \"variable\";\n      } else {\n        return ERRORCLASS;\n      }\n    }\n\n    // Handle scope changes.\n    if (current === \"return\") {\n      state.dedent = true;\n    }\n    if (((current === \"->\" || current === \"=>\") &&\n         !state.lambda &&\n         !stream.peek())\n        || style === \"indent\") {\n      indent(stream, state);\n    }\n    var delimiter_index = \"[({\".indexOf(current);\n    if (delimiter_index !== -1) {\n      indent(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n    }\n    if (indentKeywords.exec(current)){\n      indent(stream, state);\n    }\n    if (current == \"then\"){\n      dedent(stream, state);\n    }\n\n\n    if (style === \"dedent\") {\n      if (dedent(stream, state)) {\n        return ERRORCLASS;\n      }\n    }\n    delimiter_index = \"])}\".indexOf(current);\n    if (delimiter_index !== -1) {\n      while (state.scope.type == \"coffee\" && state.scope.prev)\n        state.scope = state.scope.prev;\n      if (state.scope.type == current)\n        state.scope = state.scope.prev;\n    }\n    if (state.dedent && stream.eol()) {\n      if (state.scope.type == \"coffee\" && state.scope.prev)\n        state.scope = state.scope.prev;\n      state.dedent = false;\n    }\n\n    return style;\n  }\n\n  var external = {\n    startState: function(basecolumn) {\n      return {\n        tokenize: tokenBase,\n        scope: {offset:basecolumn || 0, type:\"coffee\", prev: null, align: false},\n        lastToken: null,\n        lambda: false,\n        dedent: 0\n      };\n    },\n\n    token: function(stream, state) {\n      var fillAlign = state.scope.align === null && state.scope;\n      if (fillAlign && stream.sol()) fillAlign.align = false;\n\n      var style = tokenLexer(stream, state);\n      if (fillAlign && style && style != \"comment\") fillAlign.align = true;\n\n      state.lastToken = {style:style, content: stream.current()};\n\n      if (stream.eol() && stream.lambda) {\n        state.lambda = false;\n      }\n\n      return style;\n    },\n\n    indent: function(state, text) {\n      if (state.tokenize != tokenBase) return 0;\n      var scope = state.scope;\n      var closer = text && \"])}\".indexOf(text.charAt(0)) > -1;\n      if (closer) while (scope.type == \"coffee\" && scope.prev) scope = scope.prev;\n      var closes = closer && scope.type === text.charAt(0);\n      if (scope.align)\n        return scope.alignOffset - (closes ? 1 : 0);\n      else\n        return (closes ? scope.prev : scope).offset;\n    },\n\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n  return external;\n});\n\nCodeMirror.defineMIME(\"text/x-coffeescript\", \"coffeescript\");\n\n});\n"]}