{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/addon/fold/comment-fold.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","registerGlobalHelper","mode","blockCommentStart","blockCommentEnd","cm","start","getModeAt","startToken","endToken","line","lineText","getLine","startCh","at","ch","pass","found","lastIndexOf","length","test","getTokenTypeAt","Pos","depth","lastLine","end","endCh","outer","i","text","pos","nextOpen","indexOf","nextClose","Math","min","from","to"],"mappings":"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","file":"comment-fold.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerGlobalHelper(\"fold\", \"comment\", function(mode) {\n  return mode.blockCommentStart && mode.blockCommentEnd;\n}, function(cm, start) {\n  var mode = cm.getModeAt(start), startToken = mode.blockCommentStart, endToken = mode.blockCommentEnd;\n  if (!startToken || !endToken) return;\n  var line = start.line, lineText = cm.getLine(line);\n\n  var startCh;\n  for (var at = start.ch, pass = 0;;) {\n    var found = at <= 0 ? -1 : lineText.lastIndexOf(startToken, at - 1);\n    if (found == -1) {\n      if (pass == 1) return;\n      pass = 1;\n      at = lineText.length;\n      continue;\n    }\n    if (pass == 1 && found < start.ch) return;\n    if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1)))) {\n      startCh = found + startToken.length;\n      break;\n    }\n    at = found - 1;\n  }\n\n  var depth = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (pos == nextOpen) ++depth;\n      else if (!--depth) { end = i; endCh = pos; break outer; }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\n});\n"]}