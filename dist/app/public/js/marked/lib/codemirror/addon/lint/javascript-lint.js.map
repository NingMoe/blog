{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/addon/lint/javascript-lint.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","bogus","warnings","errors","validator","text","options","window","JSHINT","data","result","parseErrors","registerHelper","cleanup","error","fixWith","isBogus","fixes","severity","force","description","fix","find","replace","found","i","length","indexOf","output","linetabpositions","index","evidence","tabpositions","line","Array","prototype","forEach","call","item","push","pos","character","tabposition","start","end","substring","search","reason","message","from","Pos","to"],"mappings":"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","file":"javascript-lint.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  // declare global: JSHINT\n\n  var bogus = [ \"Dangerous comment\" ];\n\n  var warnings = [ [ \"Expected '{'\",\n                     \"Statement body should be inside '{ }' braces.\" ] ];\n\n  var errors = [ \"Missing semicolon\", \"Extra comma\", \"Missing property name\",\n                 \"Unmatched \", \" and instead saw\", \" is not defined\",\n                 \"Unclosed string\", \"Stopping, unable to continue\" ];\n\n  function validator(text, options) {\n    if (!window.JSHINT) return [];\n    JSHINT(text, options);\n    var errors = JSHINT.data().errors, result = [];\n    if (errors) parseErrors(errors, result);\n    return result;\n  }\n\n  CodeMirror.registerHelper(\"lint\", \"javascript\", validator);\n\n  function cleanup(error) {\n    // All problems are warnings by default\n    fixWith(error, warnings, \"warning\", true);\n    fixWith(error, errors, \"error\");\n\n    return isBogus(error) ? null : error;\n  }\n\n  function fixWith(error, fixes, severity, force) {\n    var description, fix, find, replace, found;\n\n    description = error.description;\n\n    for ( var i = 0; i < fixes.length; i++) {\n      fix = fixes[i];\n      find = (typeof fix === \"string\" ? fix : fix[0]);\n      replace = (typeof fix === \"string\" ? null : fix[1]);\n      found = description.indexOf(find) !== -1;\n\n      if (force || found) {\n        error.severity = severity;\n      }\n      if (found && replace) {\n        error.description = replace;\n      }\n    }\n  }\n\n  function isBogus(error) {\n    var description = error.description;\n    for ( var i = 0; i < bogus.length; i++) {\n      if (description.indexOf(bogus[i]) !== -1) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function parseErrors(errors, output) {\n    for ( var i = 0; i < errors.length; i++) {\n      var error = errors[i];\n      if (error) {\n        var linetabpositions, index;\n\n        linetabpositions = [];\n\n        // This next block is to fix a problem in jshint. Jshint\n        // replaces\n        // all tabs with spaces then performs some checks. The error\n        // positions (character/space) are then reported incorrectly,\n        // not taking the replacement step into account. Here we look\n        // at the evidence line and try to adjust the character position\n        // to the correct value.\n        if (error.evidence) {\n          // Tab positions are computed once per line and cached\n          var tabpositions = linetabpositions[error.line];\n          if (!tabpositions) {\n            var evidence = error.evidence;\n            tabpositions = [];\n            // ugggh phantomjs does not like this\n            // forEachChar(evidence, function(item, index) {\n            Array.prototype.forEach.call(evidence, function(item,\n                                                            index) {\n              if (item === '\\t') {\n                // First col is 1 (not 0) to match error\n                // positions\n                tabpositions.push(index + 1);\n              }\n            });\n            linetabpositions[error.line] = tabpositions;\n          }\n          if (tabpositions.length > 0) {\n            var pos = error.character;\n            tabpositions.forEach(function(tabposition) {\n              if (pos > tabposition) pos -= 1;\n            });\n            error.character = pos;\n          }\n        }\n\n        var start = error.character - 1, end = start + 1;\n        if (error.evidence) {\n          index = error.evidence.substring(start).search(/.\\b/);\n          if (index > -1) {\n            end += index;\n          }\n        }\n\n        // Convert to format expected by validation service\n        error.description = error.reason;// + \"(jshint)\";\n        error.start = error.character;\n        error.end = end;\n        error = cleanup(error);\n\n        if (error)\n          output.push({message: error.description,\n                       severity: error.severity,\n                       from: CodeMirror.Pos(error.line - 1, start),\n                       to: CodeMirror.Pos(error.line - 1, end)});\n      }\n    }\n  }\n});\n"]}