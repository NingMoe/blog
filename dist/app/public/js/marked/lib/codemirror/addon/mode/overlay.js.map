{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/addon/mode/overlay.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","overlayMode","base","overlay","combine","startState","basePos","baseCur","overlayPos","overlayCur","streamSeen","copyState","state","token","stream","Math","min","start","pos","combineTokens","indent","textAfter","electricChars","innerMode","mode","blankLine"],"mappings":";;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,UAASA,GAAT,EAAc;AACb,MAAI,QAAOC,OAAP,yCAAOA,OAAP,MAAkB,QAAlB,IAA8B,QAAOC,MAAP,yCAAOA,MAAP,MAAiB,QAAnD,EAA6D;AAC3DF,QAAIG,QAAQ,sBAAR,CAAJ,EADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,OAAOC,GAA1C,EAA+C;AAClDD,WAAO,CAAC,sBAAD,CAAP,EAAiCJ,GAAjC,EADG,KAEA;AACHA,QAAIM,UAAJ;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;AACxB;;AAEAA,aAAWC,WAAX,GAAyB,UAASC,IAAT,EAAeC,OAAf,EAAwBC,OAAxB,EAAiC;AACxD,WAAO;AACLC,kBAAY,sBAAW;AACrB,eAAO;AACLH,gBAAMF,WAAWK,UAAX,CAAsBH,IAAtB,CADD;AAELC,mBAASH,WAAWK,UAAX,CAAsBF,OAAtB,CAFJ;AAGLG,mBAAS,CAHJ,EAGOC,SAAS,IAHhB;AAILC,sBAAY,CAJP,EAIUC,YAAY,IAJtB;AAKLC,sBAAY;AALP,SAAP;AAOD,OATI;AAULC,iBAAW,mBAASC,KAAT,EAAgB;AACzB,eAAO;AACLV,gBAAMF,WAAWW,SAAX,CAAqBT,IAArB,EAA2BU,MAAMV,IAAjC,CADD;AAELC,mBAASH,WAAWW,SAAX,CAAqBR,OAArB,EAA8BS,MAAMT,OAApC,CAFJ;AAGLG,mBAASM,MAAMN,OAHV,EAGmBC,SAAS,IAH5B;AAILC,sBAAYI,MAAMJ,UAJb,EAIyBC,YAAY;AAJrC,SAAP;AAMD,OAjBI;;AAmBLI,aAAO,eAASC,MAAT,EAAiBF,KAAjB,EAAwB;AAC7B,YAAIE,UAAUF,MAAMF,UAAhB,IACAK,KAAKC,GAAL,CAASJ,MAAMN,OAAf,EAAwBM,MAAMJ,UAA9B,IAA4CM,OAAOG,KADvD,EAC8D;AAC5DL,gBAAMF,UAAN,GAAmBI,MAAnB;AACAF,gBAAMN,OAAN,GAAgBM,MAAMJ,UAAN,GAAmBM,OAAOG,KAA1C;AACD;;AAED,YAAIH,OAAOG,KAAP,IAAgBL,MAAMN,OAA1B,EAAmC;AACjCM,gBAAML,OAAN,GAAgBL,KAAKW,KAAL,CAAWC,MAAX,EAAmBF,MAAMV,IAAzB,CAAhB;AACAU,gBAAMN,OAAN,GAAgBQ,OAAOI,GAAvB;AACD;AACD,YAAIJ,OAAOG,KAAP,IAAgBL,MAAMJ,UAA1B,EAAsC;AACpCM,iBAAOI,GAAP,GAAaJ,OAAOG,KAApB;AACAL,gBAAMH,UAAN,GAAmBN,QAAQU,KAAR,CAAcC,MAAd,EAAsBF,MAAMT,OAA5B,CAAnB;AACAS,gBAAMJ,UAAN,GAAmBM,OAAOI,GAA1B;AACD;AACDJ,eAAOI,GAAP,GAAaH,KAAKC,GAAL,CAASJ,MAAMN,OAAf,EAAwBM,MAAMJ,UAA9B,CAAb;;AAEA;AACA;AACA,YAAII,MAAMH,UAAN,IAAoB,IAAxB,EAA8B,OAAOG,MAAML,OAAb,CAA9B,KACK,IAAIK,MAAML,OAAN,IAAiB,IAAjB,IACAK,MAAMT,OAAN,CAAcgB,aADd,IAEAf,WAAWQ,MAAMT,OAAN,CAAcgB,aAAd,IAA+B,IAF9C,EAGH,OAAOP,MAAML,OAAN,GAAgB,GAAhB,GAAsBK,MAAMH,UAAnC,CAHG,KAIA,OAAOG,MAAMH,UAAb;AACN,OA7CI;;AA+CLW,cAAQlB,KAAKkB,MAAL,IAAe,UAASR,KAAT,EAAgBS,SAAhB,EAA2B;AAChD,eAAOnB,KAAKkB,MAAL,CAAYR,MAAMV,IAAlB,EAAwBmB,SAAxB,CAAP;AACD,OAjDI;AAkDLC,qBAAepB,KAAKoB,aAlDf;;AAoDLC,iBAAW,mBAASX,KAAT,EAAgB;AAAE,eAAO,EAACA,OAAOA,MAAMV,IAAd,EAAoBsB,MAAMtB,IAA1B,EAAP;AAAyC,OApDjE;;AAsDLuB,iBAAW,mBAASb,KAAT,EAAgB;AACzB,YAAIV,KAAKuB,SAAT,EAAoBvB,KAAKuB,SAAL,CAAeb,MAAMV,IAArB;AACpB,YAAIC,QAAQsB,SAAZ,EAAuBtB,QAAQsB,SAAR,CAAkBb,MAAMT,OAAxB;AACxB;AAzDI,KAAP;AA2DD,GA5DD;AA8DC,CAxED","file":"overlay.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Utility function that allows modes to be combined. The mode given\n// as the base argument takes care of most of the normal mode\n// functionality, but a second (typically simple) mode is used, which\n// can override the style of text. Both modes get to parse all of the\n// text, but when both assign a non-null style to a piece of code, the\n// overlay wins, unless the combine argument was true and not overridden,\n// or state.overlay.combineTokens was true, in which case the styles are\n// combined.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.overlayMode = function(base, overlay, combine) {\n  return {\n    startState: function() {\n      return {\n        base: CodeMirror.startState(base),\n        overlay: CodeMirror.startState(overlay),\n        basePos: 0, baseCur: null,\n        overlayPos: 0, overlayCur: null,\n        streamSeen: null\n      };\n    },\n    copyState: function(state) {\n      return {\n        base: CodeMirror.copyState(base, state.base),\n        overlay: CodeMirror.copyState(overlay, state.overlay),\n        basePos: state.basePos, baseCur: null,\n        overlayPos: state.overlayPos, overlayCur: null\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream != state.streamSeen ||\n          Math.min(state.basePos, state.overlayPos) < stream.start) {\n        state.streamSeen = stream;\n        state.basePos = state.overlayPos = stream.start;\n      }\n\n      if (stream.start == state.basePos) {\n        state.baseCur = base.token(stream, state.base);\n        state.basePos = stream.pos;\n      }\n      if (stream.start == state.overlayPos) {\n        stream.pos = stream.start;\n        state.overlayCur = overlay.token(stream, state.overlay);\n        state.overlayPos = stream.pos;\n      }\n      stream.pos = Math.min(state.basePos, state.overlayPos);\n\n      // state.overlay.combineTokens always takes precedence over combine,\n      // unless set to null\n      if (state.overlayCur == null) return state.baseCur;\n      else if (state.baseCur != null &&\n               state.overlay.combineTokens ||\n               combine && state.overlay.combineTokens == null)\n        return state.baseCur + \" \" + state.overlayCur;\n      else return state.overlayCur;\n    },\n\n    indent: base.indent && function(state, textAfter) {\n      return base.indent(state.base, textAfter);\n    },\n    electricChars: base.electricChars,\n\n    innerMode: function(state) { return {state: state.base, mode: base}; },\n\n    blankLine: function(state) {\n      if (base.blankLine) base.blankLine(state.base);\n      if (overlay.blankLine) overlay.blankLine(state.overlay);\n    }\n  };\n};\n\n});\n"]}