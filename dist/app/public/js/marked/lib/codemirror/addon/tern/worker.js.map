{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/addon/tern/worker.js"],"names":["server","onmessage","e","data","type","startServer","defs","plugins","scripts","addFile","name","text","delFile","request","body","err","reqData","postMessage","id","String","c","pending","Error","nextId","getFile","file","importScripts","apply","tern","Server","async","console","log","v","message"],"mappings":";;AAAA;AACA;;AAEA;;AAEA,IAAIA,MAAJ;;AAEA,UAAKC,SAAL,GAAiB,UAASC,CAAT,EAAY;AAC3B,MAAIC,OAAOD,EAAEC,IAAb;AACA,UAAQA,KAAKC,IAAb;AACA,SAAK,MAAL;AAAa,aAAOC,YAAYF,KAAKG,IAAjB,EAAuBH,KAAKI,OAA5B,EAAqCJ,KAAKK,OAA1C,CAAP;AACb,SAAK,KAAL;AAAY,aAAOR,OAAOS,OAAP,CAAeN,KAAKO,IAApB,EAA0BP,KAAKQ,IAA/B,CAAP;AACZ,SAAK,KAAL;AAAY,aAAOX,OAAOY,OAAP,CAAeT,KAAKO,IAApB,CAAP;AACZ,SAAK,KAAL;AAAY,aAAOV,OAAOa,OAAP,CAAeV,KAAKW,IAApB,EAA0B,UAASC,GAAT,EAAcC,OAAd,EAAuB;AAClEC,oBAAY,EAACC,IAAIf,KAAKe,EAAV,EAAcJ,MAAME,OAApB,EAA6BD,KAAKA,OAAOI,OAAOJ,GAAP,CAAzC,EAAZ;AACD,OAFkB,CAAP;AAGZ,SAAK,SAAL;AACE,UAAIK,IAAIC,QAAQlB,KAAKe,EAAb,CAAR;AACA,aAAOG,QAAQlB,KAAKe,EAAb,CAAP;AACA,aAAOE,EAAEjB,KAAKY,GAAP,EAAYZ,KAAKQ,IAAjB,CAAP;AACF;AAAS,YAAM,IAAIW,KAAJ,CAAU,2BAA2BnB,KAAKC,IAA1C,CAAN;AAXT;AAaD,CAfD;;AAiBA,IAAImB,SAAS,CAAb;AAAA,IAAgBF,UAAU,EAA1B;AACA,SAASG,OAAT,CAAiBC,IAAjB,EAAuBL,CAAvB,EAA0B;AACxBH,cAAY,EAACb,MAAM,SAAP,EAAkBM,MAAMe,IAAxB,EAA8BP,IAAI,EAAEK,MAApC,EAAZ;AACAF,UAAQE,MAAR,IAAkBH,CAAlB;AACD;;AAED,SAASf,WAAT,CAAqBC,IAArB,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAC3C,MAAIA,OAAJ,EAAakB,cAAcC,KAAd,CAAoB,IAApB,EAA0BnB,OAA1B;;AAEbR,WAAS,IAAI4B,KAAKC,MAAT,CAAgB;AACvBL,aAASA,OADc;AAEvBM,WAAO,IAFgB;AAGvBxB,UAAMA,IAHiB;AAIvBC,aAASA;AAJc,GAAhB,CAAT;AAMD;;AAED,IAAIwB,UAAU;AACZC,OAAK,aAASC,CAAT,EAAY;AAAEhB,gBAAY,EAACb,MAAM,OAAP,EAAgB8B,SAASD,CAAzB,EAAZ;AAA2C;AADlD,CAAd","file":"worker.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// declare global: tern, server\n\nvar server;\n\nthis.onmessage = function(e) {\n  var data = e.data;\n  switch (data.type) {\n  case \"init\": return startServer(data.defs, data.plugins, data.scripts);\n  case \"add\": return server.addFile(data.name, data.text);\n  case \"del\": return server.delFile(data.name);\n  case \"req\": return server.request(data.body, function(err, reqData) {\n    postMessage({id: data.id, body: reqData, err: err && String(err)});\n  });\n  case \"getFile\":\n    var c = pending[data.id];\n    delete pending[data.id];\n    return c(data.err, data.text);\n  default: throw new Error(\"Unknown message type: \" + data.type);\n  }\n};\n\nvar nextId = 0, pending = {};\nfunction getFile(file, c) {\n  postMessage({type: \"getFile\", name: file, id: ++nextId});\n  pending[nextId] = c;\n}\n\nfunction startServer(defs, plugins, scripts) {\n  if (scripts) importScripts.apply(null, scripts);\n\n  server = new tern.Server({\n    getFile: getFile,\n    async: true,\n    defs: defs,\n    plugins: plugins\n  });\n}\n\nvar console = {\n  log: function(v) { postMessage({type: \"debug\", message: v}); }\n};\n"]}