{"version":3,"sources":["../../../../../../../../../app/public/js/marked/lib/codemirror/addon/comment/comment.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","noOptions","nonWS","Pos","firstNonWS","str","found","search","commands","toggleComment","cm","minLine","Infinity","ranges","listSelections","mode","i","length","from","to","line","uncomment","lineComment","defineExtension","options","self","getModeAt","commentString","blockCommentStart","fullLines","blockComment","firstLine","getLine","end","Math","min","ch","lastLine","pad","padding","blankLines","commentBlankLines","operation","indent","baseString","slice","cut","test","replaceRange","startString","endString","blockCommentEnd","lastLineHasText","lead","blockCommentLead","start","lineString","lines","didSomething","indexOf","getTokenTypeAt","push","pos","endPos","startLine","endLine","open","close","lastIndexOf","lastStart","firstEnd","almostLastStart","openEnd","foundEnd"],"mappings":"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","file":"comment.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    var minLine = Infinity, ranges = cm.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to)) mode = \"un\";\n        else { cm.lineComment(from, to); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to);\n      } else {\n        cm.lineComment(from, to);\n      }\n    }\n  };\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = self.getModeAt(from);\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null) return;\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = firstLine.slice(0, firstNonWS(firstLine));\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = self.getModeAt(from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        self.replaceRange(endString, to);\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = self.getModeAt(from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && (i != end || i == start) && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), endLine = end == start ? startLine : self.getLine(end);\n    var open = startLine.indexOf(startString), close = endLine.lastIndexOf(endString);\n    if (close == -1 && start != end) {\n      endLine = self.getLine(--end);\n      close = endLine.lastIndexOf(endString);\n    }\n    if (open == -1 || close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(Pos(start, open + 1))) ||\n        !/comment/.test(self.getTokenTypeAt(Pos(end, close + 1))))\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n"]}