{"version":3,"sources":["../../../../../../../app/public/js/marked/plugins/preformatted-text-dialog/preformatted-text-dialog.js"],"names":["factory","exports","cmEditor","pluginName","fn","preformattedTextDialog","_this","cm","lang","editor","settings","cursor","getCursor","selection","getSelection","classPrefix","dialogLang","dialog","preformattedText","dialogName","focus","find","length","val","dialogShowMask","dialogLockScreen","show","dialogContent","createDialog","name","title","width","height","mask","drag","dialogDraggable","content","lockScreen","maskStyle","opacity","dialogMaskOpacity","backgroundColor","dialogMaskBgColor","buttons","enter","codeTexts","alert","emptyAlert","split","i","join","ch","replaceSelection","hide","hideMask","cancel","cmConfig","mode","theme","tabSize","autofocus","autoCloseTags","indentUnit","lineNumbers","lineWrapping","extraKeys","foldCode","foldGutter","gutters","matchBrackets","indentWithTabs","styleActiveLine","styleSelectedText","autoCloseBrackets","showTrailingSpace","highlightSelectionMatches","textarea","cmObj","$CodeMirror","fromTextArea","css","margin","border","fontSize","on","getValue","setValue","require","module","define","amd","editormd","window"],"mappings":"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","file":"preformatted-text-dialog.js","sourcesContent":["/*!\r\n * Preformatted text dialog plugin for Editor.md\r\n *\r\n * @file        preformatted-text-dialog.js\r\n * @author      pandao\r\n * @version     1.2.0\r\n * @updateTime  2015-03-07\r\n * {@link       https://github.com/pandao/editor.md}\r\n * @license     MIT\r\n */\r\n\r\n(function() {\r\n\r\n    var factory = function (exports) {\r\n\t\tvar cmEditor;\r\n\t\tvar pluginName   = \"preformatted-text-dialog\";\r\n\r\n\t\texports.fn.preformattedTextDialog = function() {\r\n\r\n            var _this       = this;\r\n            var cm          = this.cm;\r\n            var lang        = this.lang;\r\n\t\t\tvar editor      = this.editor;\r\n            var settings    = this.settings;\r\n            var cursor      = cm.getCursor();\r\n            var selection   = cm.getSelection();\r\n            var classPrefix = this.classPrefix;\r\n\t\t\tvar dialogLang  = lang.dialog.preformattedText;\r\n\t\t\tvar dialogName  = classPrefix + pluginName, dialog;\r\n\r\n\t\t\tcm.focus();\r\n\r\n            if (editor.find(\".\" + dialogName).length > 0)\r\n            {\r\n                dialog = editor.find(\".\" + dialogName);\r\n                dialog.find(\"textarea\").val(selection);\r\n\r\n                this.dialogShowMask(dialog);\r\n                this.dialogLockScreen();\r\n                dialog.show();\r\n            }\r\n            else \r\n            {      \r\n                var dialogContent = \"<textarea placeholder=\\\"coding now....\\\" style=\\\"display:none;\\\">\" + selection + \"</textarea>\";\r\n\r\n                dialog = this.createDialog({\r\n                    name   : dialogName,\r\n                    title  : dialogLang.title,\r\n                    width  : 780,\r\n                    height : 540,\r\n                    mask   : settings.dialogShowMask,\r\n                    drag   : settings.dialogDraggable,\r\n                    content : dialogContent,\r\n                    lockScreen : settings.dialogLockScreen,\r\n                    maskStyle  : {\r\n                        opacity         : settings.dialogMaskOpacity,\r\n                        backgroundColor : settings.dialogMaskBgColor\r\n                    },\r\n                    buttons : {\r\n                        enter  : [lang.buttons.enter, function() {\r\n                            var codeTexts  = this.find(\"textarea\").val();\r\n\r\n                            if (codeTexts === \"\")\r\n                            {\r\n                                alert(dialogLang.emptyAlert);\r\n                                return false;\r\n                            }\r\n\r\n                            codeTexts = codeTexts.split(\"\\n\");\r\n\r\n                            for (var i in codeTexts)\r\n                            {\r\n                                codeTexts[i] = \"    \" + codeTexts[i];\r\n                            }\r\n                            \r\n                            codeTexts = codeTexts.join(\"\\n\");\r\n                            \r\n                            if (cursor.ch !== 0) {\r\n                                codeTexts = \"\\r\\n\\r\\n\" + codeTexts;\r\n                            }\r\n\r\n                            cm.replaceSelection(codeTexts);\r\n\r\n                            this.hide().lockScreen(false).hideMask();\r\n\r\n                            return false;\r\n                        }],\r\n                        cancel : [lang.buttons.cancel, function() {                                  \r\n                            this.hide().lockScreen(false).hideMask();\r\n\r\n                            return false;\r\n                        }]\r\n                    }\r\n                });\r\n            }\r\n\t\t\r\n\t\t\tvar cmConfig = {\r\n\t\t\t\tmode                      : \"text/html\",\r\n\t\t\t\ttheme                     : settings.theme,\r\n\t\t\t\ttabSize                   : 4,\r\n\t\t\t\tautofocus                 : true,\r\n\t\t\t\tautoCloseTags             : true,\r\n\t\t\t\tindentUnit                : 4,\r\n\t\t\t\tlineNumbers               : true,\r\n\t\t\t\tlineWrapping              : true,\r\n\t\t\t\textraKeys                 : {\"Ctrl-Q\": function(cm){ cm.foldCode(cm.getCursor()); }},\r\n\t\t\t\tfoldGutter                : true,\r\n\t\t\t\tgutters                   : [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\r\n\t\t\t\tmatchBrackets             : true,\r\n\t\t\t\tindentWithTabs            : true,\r\n\t\t\t\tstyleActiveLine           : true,\r\n\t\t\t\tstyleSelectedText         : true,\r\n\t\t\t\tautoCloseBrackets         : true,\r\n\t\t\t\tshowTrailingSpace         : true,\r\n\t\t\t\thighlightSelectionMatches : true\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tvar textarea = dialog.find(\"textarea\");\r\n\t\t\tvar cmObj    = dialog.find(\".CodeMirror\");\r\n\r\n\t\t\tif (dialog.find(\".CodeMirror\").length < 1) \r\n\t\t\t{\r\n\t\t\t\tcmEditor = exports.$CodeMirror.fromTextArea(textarea[0], cmConfig);\r\n\t\t\t\tcmObj    = dialog.find(\".CodeMirror\");\r\n\r\n\t\t\t\tcmObj.css({\r\n\t\t\t\t\t\"float\"   : \"none\", \r\n\t\t\t\t\tmargin    : \"0 0 5px\",\r\n\t\t\t\t\tborder    : \"1px solid #ddd\",\r\n\t\t\t\t\tfontSize  : settings.fontSize,\r\n\t\t\t\t\twidth     : \"100%\",\r\n\t\t\t\t\theight    : \"410px\"\r\n\t\t\t\t});\r\n\r\n\t\t\t\tcmEditor.on(\"change\", function(cm) {\r\n\t\t\t\t\ttextarea.val(cm.getValue());\r\n\t\t\t\t});\r\n\t\t\t} \r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\tcmEditor.setValue(cm.getSelection());\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t// CommonJS/Node.js\r\n\tif (typeof require === \"function\" && typeof exports === \"object\" && typeof module === \"object\")\r\n    { \r\n        module.exports = factory;\r\n    }\r\n\telse if (typeof define === \"function\")  // AMD/CMD/Sea.js\r\n    {\r\n\t\tif (define.amd) { // for Require.js\r\n\r\n\t\t\tdefine([\"editormd\"], function(editormd) {\r\n                factory(editormd);\r\n            });\r\n\r\n\t\t} else { // for Sea.js\r\n\t\t\tdefine(function(require) {\r\n                var editormd = require(\"./../../editormd\");\r\n                factory(editormd);\r\n            });\r\n\t\t}\r\n\t} \r\n\telse\r\n\t{\r\n        factory(window.editormd);\r\n\t}\r\n\r\n})();\r\n"]}